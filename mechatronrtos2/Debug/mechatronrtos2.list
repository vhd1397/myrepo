
mechatronrtos2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b5c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f84  08005f84  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08005f84  08005f84  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f84  08005f84  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08005f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  200000a4  08006030  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001168  08006030  00021168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013729  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fab  00000000  00000000  000337f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  000367a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00037830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a364  00000000  00000000  00038790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012355  00000000  00000000  00052af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093de6  00000000  00000000  00064e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f44  00000000  00000000  000f8c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a4 	.word	0x200000a4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c54 	.word	0x08005c54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a8 	.word	0x200000a8
 800014c:	08005c54 	.word	0x08005c54

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	60f8      	str	r0, [r7, #12]
 800016c:	60b9      	str	r1, [r7, #8]
 800016e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	4a06      	ldr	r2, [pc, #24]	; (800018c <vApplicationGetIdleTaskMemory+0x28>)
 8000174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000176:	68bb      	ldr	r3, [r7, #8]
 8000178:	4a05      	ldr	r2, [pc, #20]	; (8000190 <vApplicationGetIdleTaskMemory+0x2c>)
 800017a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2280      	movs	r2, #128	; 0x80
 8000180:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000182:	bf00      	nop
 8000184:	3714      	adds	r7, #20
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	200000c0 	.word	0x200000c0
 8000190:	20000114 	.word	0x20000114

08000194 <HAL_UART_RxCpltCallback>:
int zaman=500,sayi=0;
uint32_t zaman1[]={1000,300,700}; // {1 second,  ledon time,  ledoff time}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	//huart1->RxState=HAL_UART_STATE_READY;

	//if(huart->Instance == USART1){


	if(huart == &huart1){
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4a4a      	ldr	r2, [pc, #296]	; (80002c8 <HAL_UART_RxCpltCallback+0x134>)
 80001a0:	4293      	cmp	r3, r2
 80001a2:	f040 808c 	bne.w	80002be <HAL_UART_RxCpltCallback+0x12a>

		rxBuf[rxIndex]=rxTembuf[0];
 80001a6:	4b49      	ldr	r3, [pc, #292]	; (80002cc <HAL_UART_RxCpltCallback+0x138>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	461a      	mov	r2, r3
 80001ac:	4b48      	ldr	r3, [pc, #288]	; (80002d0 <HAL_UART_RxCpltCallback+0x13c>)
 80001ae:	7819      	ldrb	r1, [r3, #0]
 80001b0:	4b48      	ldr	r3, [pc, #288]	; (80002d4 <HAL_UART_RxCpltCallback+0x140>)
 80001b2:	5499      	strb	r1, [r3, r2]
	  	rxIndex++;
 80001b4:	4b45      	ldr	r3, [pc, #276]	; (80002cc <HAL_UART_RxCpltCallback+0x138>)
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	b2da      	uxtb	r2, r3
 80001bc:	4b43      	ldr	r3, [pc, #268]	; (80002cc <HAL_UART_RxCpltCallback+0x138>)
 80001be:	701a      	strb	r2, [r3, #0]
	  	if(rxTembuf[0]==10){ // if press enter buton (asci table number=10=enter)
 80001c0:	4b43      	ldr	r3, [pc, #268]	; (80002d0 <HAL_UART_RxCpltCallback+0x13c>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b0a      	cmp	r3, #10
 80001c6:	d175      	bne.n	80002b4 <HAL_UART_RxCpltCallback+0x120>
			sayi=rxIndex;
 80001c8:	4b40      	ldr	r3, [pc, #256]	; (80002cc <HAL_UART_RxCpltCallback+0x138>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	461a      	mov	r2, r3
 80001ce:	4b42      	ldr	r3, [pc, #264]	; (80002d8 <HAL_UART_RxCpltCallback+0x144>)
 80001d0:	601a      	str	r2, [r3, #0]
			strcpy(kopya,rxBuf); // enter tuşuna basılmadan yeni string için array oluşmayacak
 80001d2:	4940      	ldr	r1, [pc, #256]	; (80002d4 <HAL_UART_RxCpltCallback+0x140>)
 80001d4:	4841      	ldr	r0, [pc, #260]	; (80002dc <HAL_UART_RxCpltCallback+0x148>)
 80001d6:	f004 fc7d 	bl	8004ad4 <strcpy>
	  	    char *p;
	  	    p = strtok(kopya, "="); // control for having =
 80001da:	4941      	ldr	r1, [pc, #260]	; (80002e0 <HAL_UART_RxCpltCallback+0x14c>)
 80001dc:	483f      	ldr	r0, [pc, #252]	; (80002dc <HAL_UART_RxCpltCallback+0x148>)
 80001de:	f004 fc81 	bl	8004ae4 <strtok>
 80001e2:	60b8      	str	r0, [r7, #8]
	  	    if(p)
 80001e4:	68bb      	ldr	r3, [r7, #8]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d053      	beq.n	8000292 <HAL_UART_RxCpltCallback+0xfe>
	  	    {
	  	    	printf("%s\n", p);
 80001ea:	68b8      	ldr	r0, [r7, #8]
 80001ec:	f004 fc6a 	bl	8004ac4 <puts>
	  	        if(strcmp(dur,p)==0){ //during stop
 80001f0:	68b9      	ldr	r1, [r7, #8]
 80001f2:	483c      	ldr	r0, [pc, #240]	; (80002e4 <HAL_UART_RxCpltCallback+0x150>)
 80001f4:	f7ff ffac 	bl	8000150 <strcmp>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d109      	bne.n	8000212 <HAL_UART_RxCpltCallback+0x7e>
	  	        	sayac=1;
 80001fe:	4b3a      	ldr	r3, [pc, #232]	; (80002e8 <HAL_UART_RxCpltCallback+0x154>)
 8000200:	2201      	movs	r2, #1
 8000202:	701a      	strb	r2, [r3, #0]
	  	            printf("dura girdi: sayac= %i\n",sayac);
 8000204:	4b38      	ldr	r3, [pc, #224]	; (80002e8 <HAL_UART_RxCpltCallback+0x154>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4619      	mov	r1, r3
 800020a:	4838      	ldr	r0, [pc, #224]	; (80002ec <HAL_UART_RxCpltCallback+0x158>)
 800020c:	f004 fbd4 	bl	80049b8 <iprintf>
 8000210:	e03f      	b.n	8000292 <HAL_UART_RxCpltCallback+0xfe>
	  	        }
	  	        else if(strcmp(basla,p)==0){ //during start
 8000212:	68b9      	ldr	r1, [r7, #8]
 8000214:	4836      	ldr	r0, [pc, #216]	; (80002f0 <HAL_UART_RxCpltCallback+0x15c>)
 8000216:	f7ff ff9b 	bl	8000150 <strcmp>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d109      	bne.n	8000234 <HAL_UART_RxCpltCallback+0xa0>
					sayac=0;
 8000220:	4b31      	ldr	r3, [pc, #196]	; (80002e8 <HAL_UART_RxCpltCallback+0x154>)
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
					printf("baslaya girdi: sayac= %i\n",sayac);
 8000226:	4b30      	ldr	r3, [pc, #192]	; (80002e8 <HAL_UART_RxCpltCallback+0x154>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	4619      	mov	r1, r3
 800022c:	4831      	ldr	r0, [pc, #196]	; (80002f4 <HAL_UART_RxCpltCallback+0x160>)
 800022e:	f004 fbc3 	bl	80049b8 <iprintf>
 8000232:	e02e      	b.n	8000292 <HAL_UART_RxCpltCallback+0xfe>
	  	        }
	  	        else if(strcmp(ledyak,p)==0){ //during ledon=
 8000234:	68b9      	ldr	r1, [r7, #8]
 8000236:	4830      	ldr	r0, [pc, #192]	; (80002f8 <HAL_UART_RxCpltCallback+0x164>)
 8000238:	f7ff ff8a 	bl	8000150 <strcmp>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d110      	bne.n	8000264 <HAL_UART_RxCpltCallback+0xd0>

					p = strtok(NULL, "="); //control for after =
 8000242:	4927      	ldr	r1, [pc, #156]	; (80002e0 <HAL_UART_RxCpltCallback+0x14c>)
 8000244:	2000      	movs	r0, #0
 8000246:	f004 fc4d 	bl	8004ae4 <strtok>
 800024a:	60b8      	str	r0, [r7, #8]
					zaman1[1]=atoi(p);
 800024c:	68b8      	ldr	r0, [r7, #8]
 800024e:	f004 fb6f 	bl	8004930 <atoi>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	4b29      	ldr	r3, [pc, #164]	; (80002fc <HAL_UART_RxCpltCallback+0x168>)
 8000258:	605a      	str	r2, [r3, #4]
					printf("ledona girdi: %s\n", p);
 800025a:	68b9      	ldr	r1, [r7, #8]
 800025c:	4828      	ldr	r0, [pc, #160]	; (8000300 <HAL_UART_RxCpltCallback+0x16c>)
 800025e:	f004 fbab 	bl	80049b8 <iprintf>
 8000262:	e016      	b.n	8000292 <HAL_UART_RxCpltCallback+0xfe>

                }
                else if(strcmp(ledson,p)==0){ //during ledoff=
 8000264:	68b9      	ldr	r1, [r7, #8]
 8000266:	4827      	ldr	r0, [pc, #156]	; (8000304 <HAL_UART_RxCpltCallback+0x170>)
 8000268:	f7ff ff72 	bl	8000150 <strcmp>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d10f      	bne.n	8000292 <HAL_UART_RxCpltCallback+0xfe>
					p = strtok(NULL, "="); //control for after =
 8000272:	491b      	ldr	r1, [pc, #108]	; (80002e0 <HAL_UART_RxCpltCallback+0x14c>)
 8000274:	2000      	movs	r0, #0
 8000276:	f004 fc35 	bl	8004ae4 <strtok>
 800027a:	60b8      	str	r0, [r7, #8]
					printf("ledoffa girdi: %s\n", p);
 800027c:	68b9      	ldr	r1, [r7, #8]
 800027e:	4822      	ldr	r0, [pc, #136]	; (8000308 <HAL_UART_RxCpltCallback+0x174>)
 8000280:	f004 fb9a 	bl	80049b8 <iprintf>
					zaman1[2]=atoi(p);
 8000284:	68b8      	ldr	r0, [r7, #8]
 8000286:	f004 fb53 	bl	8004930 <atoi>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <HAL_UART_RxCpltCallback+0x168>)
 8000290:	609a      	str	r2, [r3, #8]

                }
	  	    }

	  		rxIndex=0;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <HAL_UART_RxCpltCallback+0x138>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
	  		for(int k=0;k<30;k++){rxBuf[k]='\0';} //clear to received string array
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
 800029c:	e007      	b.n	80002ae <HAL_UART_RxCpltCallback+0x11a>
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <HAL_UART_RxCpltCallback+0x140>)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	4413      	add	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3301      	adds	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2b1d      	cmp	r3, #29
 80002b2:	ddf4      	ble.n	800029e <HAL_UART_RxCpltCallback+0x10a>
	  	}
	  	//CLEAR_BIT(huart1.Instance->CR1,USART_CR1_RXNEIE);

	  	HAL_UART_Receive_IT(&huart1, rxTembuf, 1); // set again interrupt
 80002b4:	2201      	movs	r2, #1
 80002b6:	4906      	ldr	r1, [pc, #24]	; (80002d0 <HAL_UART_RxCpltCallback+0x13c>)
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <HAL_UART_RxCpltCallback+0x134>)
 80002ba:	f001 fecc 	bl	8002056 <HAL_UART_Receive_IT>
	}

}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200010c8 	.word	0x200010c8
 80002cc:	20000314 	.word	0x20000314
 80002d0:	20001078 	.word	0x20001078
 80002d4:	200010a8 	.word	0x200010a8
 80002d8:	20000318 	.word	0x20000318
 80002dc:	20001084 	.word	0x20001084
 80002e0:	08005c6c 	.word	0x08005c6c
 80002e4:	20000000 	.word	0x20000000
 80002e8:	20000315 	.word	0x20000315
 80002ec:	08005c70 	.word	0x08005c70
 80002f0:	20000008 	.word	0x20000008
 80002f4:	08005c88 	.word	0x08005c88
 80002f8:	20000010 	.word	0x20000010
 80002fc:	20000024 	.word	0x20000024
 8000300:	08005ca4 	.word	0x08005ca4
 8000304:	20000018 	.word	0x20000018
 8000308:	08005cb8 	.word	0x08005cb8

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000312:	f000 fbb5 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000316:	f000 f83d 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031a:	f000 f8ab 	bl	8000474 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800031e:	f000 f87f 	bl	8000420 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */



 // deneme = xSemaphoreCreateCounting(1,1);
  deneme = xSemaphoreCreateBinary(); //create binary semaphore
 8000322:	2203      	movs	r2, #3
 8000324:	2100      	movs	r1, #0
 8000326:	2001      	movs	r0, #1
 8000328:	f002 fc06 	bl	8002b38 <xQueueGenericCreate>
 800032c:	4603      	mov	r3, r0
 800032e:	4a12      	ldr	r2, [pc, #72]	; (8000378 <main+0x6c>)
 8000330:	6013      	str	r3, [r2, #0]
//  HAL_StatusTypeDef status;


 xTaskCreate(Task1,                // Task function
 8000332:	2300      	movs	r3, #0
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2300      	movs	r3, #0
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2300      	movs	r3, #0
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	490f      	ldr	r1, [pc, #60]	; (800037c <main+0x70>)
 8000340:	480f      	ldr	r0, [pc, #60]	; (8000380 <main+0x74>)
 8000342:	f002 ffbe 	bl	80032c2 <xTaskCreate>
						  configMINIMAL_STACK_SIZE,                    // Stack depth
                          NULL,                    // Task parameter
                          0,                        // Priority
                          NULL);                // Task handle

  xTaskCreate(Task2,"Task 2",100,NULL,0,NULL);
 8000346:	2300      	movs	r3, #0
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	2300      	movs	r3, #0
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2300      	movs	r3, #0
 8000350:	2264      	movs	r2, #100	; 0x64
 8000352:	490c      	ldr	r1, [pc, #48]	; (8000384 <main+0x78>)
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <main+0x7c>)
 8000356:	f002 ffb4 	bl	80032c2 <xTaskCreate>


 vTaskStartScheduler(); // start rtos scheduler
 800035a:	f003 f915 	bl	8003588 <vTaskStartScheduler>
 xSemaphoreGive(deneme); // we have 1 semophere
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <main+0x6c>)
 8000360:	6818      	ldr	r0, [r3, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	2200      	movs	r2, #0
 8000366:	2100      	movs	r1, #0
 8000368:	f002 fc44 	bl	8002bf4 <xQueueGenericSend>

  HAL_UART_Receive_IT(&huart1, rxTembuf, 1); // set interrupt for uart 8n1 receive
 800036c:	2201      	movs	r2, #1
 800036e:	4907      	ldr	r1, [pc, #28]	; (800038c <main+0x80>)
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <main+0x84>)
 8000372:	f001 fe70 	bl	8002056 <HAL_UART_Receive_IT>

  while (1)
 8000376:	e7fe      	b.n	8000376 <main+0x6a>
 8000378:	200010a4 	.word	0x200010a4
 800037c:	08005ccc 	.word	0x08005ccc
 8000380:	08000535 	.word	0x08000535
 8000384:	08005cd4 	.word	0x08005cd4
 8000388:	08000611 	.word	0x08000611
 800038c:	20001078 	.word	0x20001078
 8000390:	200010c8 	.word	0x200010c8

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b090      	sub	sp, #64	; 0x40
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	2228      	movs	r2, #40	; 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f004 fb00 	bl	80049a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c4:	2301      	movs	r3, #1
 80003c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c8:	2302      	movs	r3, #2
 80003ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d8:	f107 0318 	add.w	r3, r7, #24
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fec7 	bl	8001170 <HAL_RCC_OscConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e8:	f000 f94c 	bl	8000684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ec:	230f      	movs	r3, #15
 80003ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f0:	2302      	movs	r3, #2
 80003f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2102      	movs	r1, #2
 8000406:	4618      	mov	r0, r3
 8000408:	f001 f932 	bl	8001670 <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000412:	f000 f937 	bl	8000684 <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3740      	adds	r7, #64	; 0x40
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000426:	4a12      	ldr	r2, [pc, #72]	; (8000470 <MX_USART1_UART_Init+0x50>)
 8000428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_USART1_UART_Init+0x4c>)
 800042c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USART1_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_USART1_UART_Init+0x4c>)
 8000458:	f001 fd1e 	bl	8001e98 <HAL_UART_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000462:	f000 f90f 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200010c8 	.word	0x200010c8
 8000470:	40013800 	.word	0x40013800

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <MX_GPIO_Init+0xb4>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a26      	ldr	r2, [pc, #152]	; (8000528 <MX_GPIO_Init+0xb4>)
 800048e:	f043 0310 	orr.w	r3, r3, #16
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <MX_GPIO_Init+0xb4>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0310 	and.w	r3, r3, #16
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <MX_GPIO_Init+0xb4>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a20      	ldr	r2, [pc, #128]	; (8000528 <MX_GPIO_Init+0xb4>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_GPIO_Init+0xb4>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0320 	and.w	r3, r3, #32
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_GPIO_Init+0xb4>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <MX_GPIO_Init+0xb4>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_GPIO_Init+0xb4>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d6:	4815      	ldr	r0, [pc, #84]	; (800052c <MX_GPIO_Init+0xb8>)
 80004d8:	f000 fe18 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2106      	movs	r1, #6
 80004e0:	4813      	ldr	r0, [pc, #76]	; (8000530 <MX_GPIO_Init+0xbc>)
 80004e2:	f000 fe13 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	480b      	ldr	r0, [pc, #44]	; (800052c <MX_GPIO_Init+0xb8>)
 8000500:	f000 fc80 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000504:	2306      	movs	r3, #6
 8000506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2302      	movs	r3, #2
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_GPIO_Init+0xbc>)
 800051c:	f000 fc72 	bl	8000e04 <HAL_GPIO_Init>

}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	40011000 	.word	0x40011000
 8000530:	40010800 	.word	0x40010800

08000534 <Task1>:

/* USER CODE BEGIN 4 */
void Task1(void * argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

  for(;;)
  {


		  xSemaphoreTake(deneme, portMAX_DELAY); //
 800053c:	4b2a      	ldr	r3, [pc, #168]	; (80005e8 <Task1+0xb4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f04f 31ff 	mov.w	r1, #4294967295
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fc53 	bl	8002df0 <xQueueSemaphoreTake>

		  if(sayac==1){ //during stop
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <Task1+0xb8>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d110      	bne.n	8000574 <Task1+0x40>
			  zaman=zaman1[0]; //1 second toggle pin
 8000552:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <Task1+0xbc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <Task1+0xc0>)
 800055a:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, "led1saniye\n\r", 15, 100);
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	220f      	movs	r2, #15
 8000560:	4925      	ldr	r1, [pc, #148]	; (80005f8 <Task1+0xc4>)
 8000562:	4826      	ldr	r0, [pc, #152]	; (80005fc <Task1+0xc8>)
 8000564:	f001 fce5 	bl	8001f32 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056c:	4824      	ldr	r0, [pc, #144]	; (8000600 <Task1+0xcc>)
 800056e:	f000 fde5 	bl	800113c <HAL_GPIO_TogglePin>
 8000572:	e02c      	b.n	80005ce <Task1+0x9a>
		  }
		  else{ //during start
			  if(muteks){ // led on off switch for time
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <Task1+0xd0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d014      	beq.n	80005a6 <Task1+0x72>
				  muteks=0; //switch  for on
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <Task1+0xd0>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
				  zaman=zaman1[1];
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <Task1+0xbc>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	461a      	mov	r2, r3
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <Task1+0xc0>)
 800058a:	601a      	str	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, "ledon300\n\r", 15, 100);
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	220f      	movs	r2, #15
 8000590:	491d      	ldr	r1, [pc, #116]	; (8000608 <Task1+0xd4>)
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <Task1+0xc8>)
 8000594:	f001 fccd 	bl	8001f32 <HAL_UART_Transmit>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	4818      	ldr	r0, [pc, #96]	; (8000600 <Task1+0xcc>)
 80005a0:	f000 fdb4 	bl	800110c <HAL_GPIO_WritePin>
 80005a4:	e013      	b.n	80005ce <Task1+0x9a>

			  }else{
				  muteks=1; //switch for offf
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <Task1+0xd0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
				  zaman=zaman1[2];
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <Task1+0xbc>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <Task1+0xc0>)
 80005b4:	601a      	str	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1, "ledoff700\n\r", 15, 100);
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	220f      	movs	r2, #15
 80005ba:	4914      	ldr	r1, [pc, #80]	; (800060c <Task1+0xd8>)
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <Task1+0xc8>)
 80005be:	f001 fcb8 	bl	8001f32 <HAL_UART_Transmit>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <Task1+0xcc>)
 80005ca:	f000 fd9f 	bl	800110c <HAL_GPIO_WritePin>

		  }

		  //
		  //taskYIELD();
		  xSemaphoreGive(deneme);
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <Task1+0xb4>)
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	f002 fb0c 	bl	8002bf4 <xQueueGenericSend>
		  vTaskDelay(zaman);
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <Task1+0xc0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 ff9d 	bl	8003520 <vTaskDelay>
		  xSemaphoreTake(deneme, portMAX_DELAY); //
 80005e6:	e7a9      	b.n	800053c <Task1+0x8>
 80005e8:	200010a4 	.word	0x200010a4
 80005ec:	20000315 	.word	0x20000315
 80005f0:	20000024 	.word	0x20000024
 80005f4:	20000020 	.word	0x20000020
 80005f8:	08005cdc 	.word	0x08005cdc
 80005fc:	200010c8 	.word	0x200010c8
 8000600:	40011000 	.word	0x40011000
 8000604:	20000316 	.word	0x20000316
 8000608:	08005cec 	.word	0x08005cec
 800060c:	08005cf8 	.word	0x08005cf8

08000610 <Task2>:
  }


}
void Task2(void * argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  if(sayac==0){ // start stop control
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <Task2+0x40>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1fb      	bne.n	8000618 <Task2+0x8>
		  xSemaphoreTake(deneme, portMAX_DELAY);
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <Task2+0x44>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f04f 31ff 	mov.w	r1, #4294967295
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fbe1 	bl	8002df0 <xQueueSemaphoreTake>
		  HAL_UART_Transmit(&huart1, kopya, sizeof(sayi), 100);
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	2204      	movs	r2, #4
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <Task2+0x48>)
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <Task2+0x4c>)
 8000636:	f001 fc7c 	bl	8001f32 <HAL_UART_Transmit>
		  xSemaphoreGive(deneme);
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <Task2+0x44>)
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	f002 fad6 	bl	8002bf4 <xQueueGenericSend>
		  //taskYIELD();

		  vTaskDelay(100);
 8000648:	2064      	movs	r0, #100	; 0x64
 800064a:	f002 ff69 	bl	8003520 <vTaskDelay>
	  if(sayac==0){ // start stop control
 800064e:	e7e3      	b.n	8000618 <Task2+0x8>
 8000650:	20000315 	.word	0x20000315
 8000654:	200010a4 	.word	0x200010a4
 8000658:	20001084 	.word	0x20001084
 800065c:	200010c8 	.word	0x200010c8

08000660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d101      	bne.n	8000676 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000672:	f000 fa1b 	bl	8000aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012c00 	.word	0x40012c00

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_MspInit+0x68>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <HAL_MspInit+0x68>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_MspInit+0x68>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_MspInit+0x68>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <HAL_MspInit+0x68>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x68>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	210f      	movs	r1, #15
 80006ca:	f06f 0001 	mvn.w	r0, #1
 80006ce:	f000 fabe 	bl	8000c4e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_MspInit+0x6c>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <HAL_MspInit+0x6c>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010000 	.word	0x40010000

08000700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <HAL_UART_MspInit+0x9c>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d139      	bne.n	8000794 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <HAL_UART_MspInit+0xa0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <HAL_UART_MspInit+0xa0>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_UART_MspInit+0xa0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_UART_MspInit+0xa0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <HAL_UART_MspInit+0xa0>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_UART_MspInit+0xa0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	4619      	mov	r1, r3
 8000764:	480f      	ldr	r0, [pc, #60]	; (80007a4 <HAL_UART_MspInit+0xa4>)
 8000766:	f000 fb4d 	bl	8000e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800076a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	4619      	mov	r1, r3
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <HAL_UART_MspInit+0xa4>)
 8000780:	f000 fb40 	bl	8000e04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2106      	movs	r1, #6
 8000788:	2025      	movs	r0, #37	; 0x25
 800078a:	f000 fa60 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800078e:	2025      	movs	r0, #37	; 0x25
 8000790:	f000 fa79 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40013800 	.word	0x40013800
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010800 	.word	0x40010800

080007a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	2019      	movs	r0, #25
 80007be:	f000 fa46 	bl	8000c4e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007c2:	2019      	movs	r0, #25
 80007c4:	f000 fa5f 	bl	8000c86 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <HAL_InitTick+0x9c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <HAL_InitTick+0x9c>)
 80007ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <HAL_InitTick+0x9c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e0:	f107 0210 	add.w	r2, r7, #16
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 f8bc 	bl	8001968 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007f0:	f001 f8a6 	bl	8001940 <HAL_RCC_GetPCLK2Freq>
 80007f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	4a13      	ldr	r2, [pc, #76]	; (8000848 <HAL_InitTick+0xa0>)
 80007fa:	fba2 2303 	umull	r2, r3, r2, r3
 80007fe:	0c9b      	lsrs	r3, r3, #18
 8000800:	3b01      	subs	r3, #1
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_InitTick+0xa4>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <HAL_InitTick+0xa8>)
 8000808:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_InitTick+0xa4>)
 800080c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000810:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_InitTick+0xa4>)
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000816:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_InitTick+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_InitTick+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <HAL_InitTick+0xa4>)
 8000826:	f001 f8ed 	bl	8001a04 <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000830:	4806      	ldr	r0, [pc, #24]	; (800084c <HAL_InitTick+0xa4>)
 8000832:	f001 f93f 	bl	8001ab4 <HAL_TIM_Base_Start_IT>
 8000836:	4603      	mov	r3, r0
 8000838:	e000      	b.n	800083c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	431bde83 	.word	0x431bde83
 800084c:	2000110c 	.word	0x2000110c
 8000850:	40012c00 	.word	0x40012c00

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TIM1_UP_IRQHandler+0x10>)
 8000886:	f001 f967 	bl	8001b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000110c 	.word	0x2000110c

08000894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <USART1_IRQHandler+0x10>)
 800089a:	f001 fc0d 	bl	80020b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200010c8 	.word	0x200010c8

080008a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	return 1;
 80008ac:	2301      	movs	r3, #1
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <_kill>:

int _kill(int pid, int sig)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008c0:	f004 f83a 	bl	8004938 <__errno>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2216      	movs	r2, #22
 80008c8:	601a      	str	r2, [r3, #0]
	return -1;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_exit>:

void _exit (int status)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008de:	f04f 31ff 	mov.w	r1, #4294967295
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffe7 	bl	80008b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008e8:	e7fe      	b.n	80008e8 <_exit+0x12>

080008ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	e00a      	b.n	8000912 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008fc:	f3af 8000 	nop.w
 8000900:	4601      	mov	r1, r0
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	60ba      	str	r2, [r7, #8]
 8000908:	b2ca      	uxtb	r2, r1
 800090a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	3301      	adds	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	429a      	cmp	r2, r3
 8000918:	dbf0      	blt.n	80008fc <_read+0x12>
	}

return len;
 800091a:	687b      	ldr	r3, [r7, #4]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e009      	b.n	800094a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	60ba      	str	r2, [r7, #8]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	429a      	cmp	r2, r3
 8000950:	dbf1      	blt.n	8000936 <_write+0x12>
	}
	return len;
 8000952:	687b      	ldr	r3, [r7, #4]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <_close>:

int _close(int file)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	return -1;
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000982:	605a      	str	r2, [r3, #4]
	return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <_isatty>:

int _isatty(int file)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	return 1;
 8000998:	2301      	movs	r3, #1
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f003 ffa4 	bl	8004938 <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20005000 	.word	0x20005000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	2000031c 	.word	0x2000031c
 8000a24:	20001168 	.word	0x20001168

08000a28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5a:	f7ff ffe5 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f003 ff71 	bl	8004944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff fc53 	bl	800030c <main>
  bx lr
 8000a66:	4770      	bx	lr
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000a70:	08005f8c 	.word	0x08005f8c
  ldr r2, =_sbss
 8000a74:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000a78:	20001168 	.word	0x20001168

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x28>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x28>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f8d1 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f7ff fe86 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fdf8 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a03      	ldr	r2, [pc, #12]	; (8000acc <HAL_IncTick+0x20>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	20000038 	.word	0x20000038
 8000acc:	20001154 	.word	0x20001154

08000ad0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetTick+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20001154 	.word	0x20001154

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db0b      	blt.n	8000b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	f003 021f 	and.w	r2, r3, #31
 8000b60:	4906      	ldr	r1, [pc, #24]	; (8000b7c <__NVIC_EnableIRQ+0x34>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	2001      	movs	r0, #1
 8000b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff4f 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff64 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ffb2 	bl	8000bd4 <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff81 	bl	8000b80 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff57 	bl	8000b48 <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d008      	beq.n	8000cca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2204      	movs	r2, #4
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e020      	b.n	8000d0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 020e 	bic.w	r2, r2, #14
 8000cd8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
	...

08000d18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d005      	beq.n	8000d3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2204      	movs	r2, #4
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e051      	b.n	8000dde <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 020e 	bic.w	r2, r2, #14
 8000d48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0201 	bic.w	r2, r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_DMA_Abort_IT+0xd0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d029      	beq.n	8000db8 <HAL_DMA_Abort_IT+0xa0>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a20      	ldr	r2, [pc, #128]	; (8000dec <HAL_DMA_Abort_IT+0xd4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d022      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x9c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <HAL_DMA_Abort_IT+0xd8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d01a      	beq.n	8000dae <HAL_DMA_Abort_IT+0x96>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_DMA_Abort_IT+0xdc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d012      	beq.n	8000da8 <HAL_DMA_Abort_IT+0x90>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <HAL_DMA_Abort_IT+0xe0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00a      	beq.n	8000da2 <HAL_DMA_Abort_IT+0x8a>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <HAL_DMA_Abort_IT+0xe4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d102      	bne.n	8000d9c <HAL_DMA_Abort_IT+0x84>
 8000d96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d9a:	e00e      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000da0:	e00b      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000da2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da6:	e008      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	e005      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db2:	e002      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000db4:	2310      	movs	r3, #16
 8000db6:	e000      	b.n	8000dba <HAL_DMA_Abort_IT+0xa2>
 8000db8:	2301      	movs	r3, #1
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <HAL_DMA_Abort_IT+0xe8>)
 8000dbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	4798      	blx	r3
    } 
  }
  return status;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020008 	.word	0x40020008
 8000dec:	4002001c 	.word	0x4002001c
 8000df0:	40020030 	.word	0x40020030
 8000df4:	40020044 	.word	0x40020044
 8000df8:	40020058 	.word	0x40020058
 8000dfc:	4002006c 	.word	0x4002006c
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b08b      	sub	sp, #44	; 0x2c
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e169      	b.n	80010ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8158 	bne.w	80010e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4a9a      	ldr	r2, [pc, #616]	; (80010a4 <HAL_GPIO_Init+0x2a0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d05e      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e40:	4a98      	ldr	r2, [pc, #608]	; (80010a4 <HAL_GPIO_Init+0x2a0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d875      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e46:	4a98      	ldr	r2, [pc, #608]	; (80010a8 <HAL_GPIO_Init+0x2a4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d058      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e4c:	4a96      	ldr	r2, [pc, #600]	; (80010a8 <HAL_GPIO_Init+0x2a4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d86f      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e52:	4a96      	ldr	r2, [pc, #600]	; (80010ac <HAL_GPIO_Init+0x2a8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d052      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e58:	4a94      	ldr	r2, [pc, #592]	; (80010ac <HAL_GPIO_Init+0x2a8>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d869      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e5e:	4a94      	ldr	r2, [pc, #592]	; (80010b0 <HAL_GPIO_Init+0x2ac>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d04c      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e64:	4a92      	ldr	r2, [pc, #584]	; (80010b0 <HAL_GPIO_Init+0x2ac>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d863      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a92      	ldr	r2, [pc, #584]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d046      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e70:	4a90      	ldr	r2, [pc, #576]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d85d      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d82a      	bhi.n	8000ed0 <HAL_GPIO_Init+0xcc>
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d859      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <HAL_GPIO_Init+0x80>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000eff 	.word	0x08000eff
 8000e88:	08000ed9 	.word	0x08000ed9
 8000e8c:	08000eeb 	.word	0x08000eeb
 8000e90:	08000f2d 	.word	0x08000f2d
 8000e94:	08000f33 	.word	0x08000f33
 8000e98:	08000f33 	.word	0x08000f33
 8000e9c:	08000f33 	.word	0x08000f33
 8000ea0:	08000f33 	.word	0x08000f33
 8000ea4:	08000f33 	.word	0x08000f33
 8000ea8:	08000f33 	.word	0x08000f33
 8000eac:	08000f33 	.word	0x08000f33
 8000eb0:	08000f33 	.word	0x08000f33
 8000eb4:	08000f33 	.word	0x08000f33
 8000eb8:	08000f33 	.word	0x08000f33
 8000ebc:	08000f33 	.word	0x08000f33
 8000ec0:	08000f33 	.word	0x08000f33
 8000ec4:	08000f33 	.word	0x08000f33
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000ef5 	.word	0x08000ef5
 8000ed0:	4a79      	ldr	r2, [pc, #484]	; (80010b8 <HAL_GPIO_Init+0x2b4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ed6:	e02c      	b.n	8000f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e029      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e024      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	3308      	adds	r3, #8
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e01f      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	330c      	adds	r3, #12
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	e01a      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f06:	2304      	movs	r3, #4
 8000f08:	623b      	str	r3, [r7, #32]
          break;
 8000f0a:	e013      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d105      	bne.n	8000f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f14:	2308      	movs	r3, #8
 8000f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	611a      	str	r2, [r3, #16]
          break;
 8000f1e:	e009      	b.n	8000f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f20:	2308      	movs	r3, #8
 8000f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	615a      	str	r2, [r3, #20]
          break;
 8000f2a:	e003      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          break;
 8000f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2bff      	cmp	r3, #255	; 0xff
 8000f38:	d801      	bhi.n	8000f3e <HAL_GPIO_Init+0x13a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	e001      	b.n	8000f42 <HAL_GPIO_Init+0x13e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3304      	adds	r3, #4
 8000f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d802      	bhi.n	8000f50 <HAL_GPIO_Init+0x14c>
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_Init+0x152>
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	3b08      	subs	r3, #8
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	401a      	ands	r2, r3
 8000f68:	6a39      	ldr	r1, [r7, #32]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 80b1 	beq.w	80010e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f84:	4b4d      	ldr	r3, [pc, #308]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f9c:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <HAL_GPIO_Init+0x2bc>)
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a40      	ldr	r2, [pc, #256]	; (80010c4 <HAL_GPIO_Init+0x2c0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_GPIO_Init+0x1ec>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <HAL_GPIO_Init+0x2c4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00d      	beq.n	8000fec <HAL_GPIO_Init+0x1e8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <HAL_GPIO_Init+0x2c8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3d      	ldr	r2, [pc, #244]	; (80010d0 <HAL_GPIO_Init+0x2cc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_GPIO_Init+0x1e0>
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	e004      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001002:	492f      	ldr	r1, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x2bc>)
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	492c      	ldr	r1, [pc, #176]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	4928      	ldr	r1, [pc, #160]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001034:	4013      	ands	r3, r2
 8001036:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4922      	ldr	r1, [pc, #136]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	491e      	ldr	r1, [pc, #120]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800105c:	4013      	ands	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	4918      	ldr	r1, [pc, #96]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	608b      	str	r3, [r1, #8]
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	43db      	mvns	r3, r3
 8001082:	4914      	ldr	r1, [pc, #80]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001084:	4013      	ands	r3, r2
 8001086:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d021      	beq.n	80010d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	490e      	ldr	r1, [pc, #56]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	60cb      	str	r3, [r1, #12]
 80010a0:	e021      	b.n	80010e6 <HAL_GPIO_Init+0x2e2>
 80010a2:	bf00      	nop
 80010a4:	10320000 	.word	0x10320000
 80010a8:	10310000 	.word	0x10310000
 80010ac:	10220000 	.word	0x10220000
 80010b0:	10210000 	.word	0x10210000
 80010b4:	10120000 	.word	0x10120000
 80010b8:	10110000 	.word	0x10110000
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40011400 	.word	0x40011400
 80010d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	43db      	mvns	r3, r3
 80010e0:	4909      	ldr	r1, [pc, #36]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3301      	adds	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f47f ae8e 	bne.w	8000e18 <HAL_GPIO_Init+0x14>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	372c      	adds	r7, #44	; 0x2c
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	611a      	str	r2, [r3, #16]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43d9      	mvns	r1, r3
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	400b      	ands	r3, r1
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	611a      	str	r2, [r3, #16]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e26c      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8087 	beq.w	800129e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001190:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b04      	cmp	r3, #4
 800119a:	d00c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119c:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d112      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	d10b      	bne.n	80011ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d06c      	beq.n	800129c <HAL_RCC_OscConfig+0x12c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d168      	bne.n	800129c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e246      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x76>
 80011d8:	4b80      	ldr	r3, [pc, #512]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a7f      	ldr	r2, [pc, #508]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e02e      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b7b      	ldr	r3, [pc, #492]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7a      	ldr	r2, [pc, #488]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b78      	ldr	r3, [pc, #480]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a77      	ldr	r2, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0xbc>
 8001212:	4b72      	ldr	r3, [pc, #456]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a71      	ldr	r2, [pc, #452]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xd4>
 800122c:	4b6b      	ldr	r3, [pc, #428]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a67      	ldr	r2, [pc, #412]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc40 	bl	8000ad0 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fc3c 	bl	8000ad0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1fa      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xe4>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fc2c 	bl	8000ad0 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fc28 	bl	8000ad0 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1e6      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x10c>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1ba      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4939      	ldr	r1, [pc, #228]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fbe1 	bl	8000ad0 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fbdd 	bl	8000ad0 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e19b      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4927      	ldr	r1, [pc, #156]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fbc0 	bl	8000ad0 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fbbc 	bl	8000ad0 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e17a      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d03a      	beq.n	80013f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d019      	beq.n	80013ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138c:	f7ff fba0 	bl	8000ad0 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fb9c 	bl	8000ad0 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e15a      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f000 fb08 	bl	80019c8 <RCC_Delay>
 80013b8:	e01c      	b.n	80013f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb86 	bl	8000ad0 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	e00f      	b.n	80013e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fb82 	bl	8000ad0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d908      	bls.n	80013e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e140      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	42420000 	.word	0x42420000
 80013e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	4b9e      	ldr	r3, [pc, #632]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e9      	bne.n	80013c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a6 	beq.w	800154e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001406:	4b97      	ldr	r3, [pc, #604]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a93      	ldr	r2, [pc, #588]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b91      	ldr	r3, [pc, #580]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d118      	bne.n	800146c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a8a      	ldr	r2, [pc, #552]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff fb43 	bl	8000ad0 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff fb3f 	bl	8000ad0 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b64      	cmp	r3, #100	; 0x64
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0fd      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x312>
 8001474:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a7a      	ldr	r2, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e02d      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x334>
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a75      	ldr	r2, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4b73      	ldr	r3, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a72      	ldr	r2, [pc, #456]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	e01c      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x356>
 80014ac:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a6c      	ldr	r2, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a69      	ldr	r2, [pc, #420]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	e00b      	b.n	80014de <HAL_RCC_OscConfig+0x36e>
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a66      	ldr	r2, [pc, #408]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6213      	str	r3, [r2, #32]
 80014d2:	4b64      	ldr	r3, [pc, #400]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a63      	ldr	r2, [pc, #396]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d015      	beq.n	8001512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff faf3 	bl	8000ad0 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff faef 	bl	8000ad0 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0ab      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	4b57      	ldr	r3, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ee      	beq.n	80014ee <HAL_RCC_OscConfig+0x37e>
 8001510:	e014      	b.n	800153c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fadd 	bl	8000ad0 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fad9 	bl	8000ad0 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e095      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ee      	bne.n	800151a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001542:	4b48      	ldr	r3, [pc, #288]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a47      	ldr	r2, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8081 	beq.w	800165a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001558:	4b42      	ldr	r3, [pc, #264]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d061      	beq.n	8001628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d146      	bne.n	80015fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b3f      	ldr	r3, [pc, #252]	; (800166c <HAL_RCC_OscConfig+0x4fc>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff faad 	bl	8000ad0 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff faa9 	bl	8000ad0 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e067      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d108      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	492d      	ldr	r1, [pc, #180]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a19      	ldr	r1, [r3, #32]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	430b      	orrs	r3, r1
 80015c6:	4927      	ldr	r1, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x4fc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fa7d 	bl	8000ad0 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff fa79 	bl	8000ad0 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e037      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x46a>
 80015f8:	e02f      	b.n	800165a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_RCC_OscConfig+0x4fc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fa66 	bl	8000ad0 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fa62 	bl	8000ad0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e020      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x498>
 8001626:	e018      	b.n	800165a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e013      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x4f4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	429a      	cmp	r2, r3
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	40007000 	.word	0x40007000
 800166c:	42420060 	.word	0x42420060

08001670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0d0      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001684:	4b6a      	ldr	r3, [pc, #424]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d910      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b67      	ldr	r3, [pc, #412]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 0207 	bic.w	r2, r3, #7
 800169a:	4965      	ldr	r1, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d040      	beq.n	8001790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d115      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e073      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06b      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f023 0203 	bic.w	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4936      	ldr	r1, [pc, #216]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001760:	f7ff f9b6 	bl	8000ad0 <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	e00a      	b.n	800177e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff f9b2 	bl	8000ad0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e053      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 020c 	and.w	r2, r3, #12
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	429a      	cmp	r2, r3
 800178e:	d1eb      	bne.n	8001768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d210      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 0207 	bic.w	r2, r3, #7
 80017a6:	4922      	ldr	r1, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f821 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001802:	4602      	mov	r2, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	490a      	ldr	r1, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c8>)
 8001810:	5ccb      	ldrb	r3, [r1, r3]
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1cc>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe ffc2 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000
 8001834:	40021000 	.word	0x40021000
 8001838:	08005d1c 	.word	0x08005d1c
 800183c:	20000030 	.word	0x20000030
 8001840:	20000034 	.word	0x20000034

08001844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b490      	push	{r4, r7}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800184c:	1d3c      	adds	r4, r7, #4
 800184e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001854:	f240 2301 	movw	r3, #513	; 0x201
 8001858:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x40>
 800187e:	2b08      	cmp	r3, #8
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x46>
 8001882:	e02d      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001886:	623b      	str	r3, [r7, #32]
      break;
 8001888:	e02d      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	0c9b      	lsrs	r3, r3, #18
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001896:	4413      	add	r3, r2
 8001898:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800189c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	0c5b      	lsrs	r3, r3, #17
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018b6:	4413      	add	r3, r2
 80018b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c2:	fb02 f203 	mul.w	r2, r2, r3
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
 80018ce:	e004      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	623b      	str	r3, [r7, #32]
      break;
 80018de:	e002      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e2:	623b      	str	r3, [r7, #32]
      break;
 80018e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e6:	6a3b      	ldr	r3, [r7, #32]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc90      	pop	{r4, r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	08005d04 	.word	0x08005d04
 80018f8:	40021000 	.word	0x40021000
 80018fc:	007a1200 	.word	0x007a1200
 8001900:	003d0900 	.word	0x003d0900

08001904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001908:	4b02      	ldr	r3, [pc, #8]	; (8001914 <HAL_RCC_GetHCLKFreq+0x10>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000030 	.word	0x20000030

08001918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800191c:	f7ff fff2 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 8001920:	4602      	mov	r2, r0
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	4903      	ldr	r1, [pc, #12]	; (800193c <HAL_RCC_GetPCLK1Freq+0x24>)
 800192e:	5ccb      	ldrb	r3, [r1, r3]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001934:	4618      	mov	r0, r3
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	08005d2c 	.word	0x08005d2c

08001940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001944:	f7ff ffde 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	0adb      	lsrs	r3, r3, #11
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4903      	ldr	r1, [pc, #12]	; (8001964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	08005d2c 	.word	0x08005d2c

08001968 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	220f      	movs	r2, #15
 8001976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_RCC_GetClockConfig+0x58>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0203 	and.w	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_RCC_GetClockConfig+0x58>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_GetClockConfig+0x58>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_RCC_GetClockConfig+0x58>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0207 	and.w	r2, r3, #7
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40022000 	.word	0x40022000

080019c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <RCC_Delay+0x34>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <RCC_Delay+0x38>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0a5b      	lsrs	r3, r3, #9
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019e4:	bf00      	nop
  }
  while (Delay --);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	60fa      	str	r2, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f9      	bne.n	80019e4 <RCC_Delay+0x1c>
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000030 	.word	0x20000030
 8001a00:	10624dd3 	.word	0x10624dd3

08001a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e041      	b.n	8001a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f839 	bl	8001aa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 f9b4 	bl	8001db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d001      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e03a      	b.n	8001b42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <HAL_TIM_Base_Start_IT+0x98>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00e      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x58>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af6:	d009      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x58>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_TIM_Base_Start_IT+0x9c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x58>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d111      	bne.n	8001b30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d010      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2e:	e007      	b.n	8001b40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40012c00 	.word	0x40012c00
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40000800 	.word	0x40000800

08001b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d122      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0202 	mvn.w	r2, #2
 8001b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8ed 	bl	8001d7a <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8e0 	bl	8001d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8ef 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0204 	mvn.w	r2, #4
 8001bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8c3 	bl	8001d7a <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8b6 	bl	8001d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8c5 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0208 	mvn.w	r2, #8
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2204      	movs	r2, #4
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f899 	bl	8001d7a <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f88c 	bl	8001d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f89b 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0210 	mvn.w	r2, #16
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2208      	movs	r2, #8
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f86f 	bl	8001d7a <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f862 	bl	8001d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f871 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0201 	mvn.w	r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fcc2 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b80      	cmp	r3, #128	; 0x80
 8001cf6:	d107      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8bf 	bl	8001e86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d107      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f835 	bl	8001d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d10e      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d107      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0220 	mvn.w	r2, #32
 8001d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f88a 	bl	8001e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a29      	ldr	r2, [pc, #164]	; (8001e68 <TIM_Base_SetConfig+0xb8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00b      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dce:	d007      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <TIM_Base_SetConfig+0xbc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d003      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <TIM_Base_SetConfig+0xc0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <TIM_Base_SetConfig+0xb8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00b      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d007      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <TIM_Base_SetConfig+0xbc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d003      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <TIM_Base_SetConfig+0xc0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d108      	bne.n	8001e24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <TIM_Base_SetConfig+0xb8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d103      	bne.n	8001e58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	615a      	str	r2, [r3, #20]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800

08001e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e03f      	b.n	8001f2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fc1e 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fc85 	bl	80027ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b08a      	sub	sp, #40	; 0x28
 8001f36:	af02      	add	r7, sp, #8
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d17c      	bne.n	800204c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_UART_Transmit+0x2c>
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e075      	b.n	800204e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_UART_Transmit+0x3e>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e06e      	b.n	800204e <HAL_UART_Transmit+0x11c>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2221      	movs	r2, #33	; 0x21
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f86:	f7fe fda3 	bl	8000ad0 <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	88fa      	ldrh	r2, [r7, #6]
 8001f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa0:	d108      	bne.n	8001fb4 <HAL_UART_Transmit+0x82>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	e003      	b.n	8001fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fc4:	e02a      	b.n	800201c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fa38 	bl	8002446 <UART_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e036      	b.n	800204e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	e007      	b.n	800200e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	3301      	adds	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1cf      	bne.n	8001fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fa08 	bl	8002446 <UART_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e006      	b.n	800204e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	4613      	mov	r3, r2
 8002062:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b20      	cmp	r3, #32
 800206e:	d11d      	bne.n	80020ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_UART_Receive_IT+0x26>
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e016      	b.n	80020ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_UART_Receive_IT+0x38>
 800208a:	2302      	movs	r3, #2
 800208c:	e00f      	b.n	80020ae <HAL_UART_Receive_IT+0x58>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	461a      	mov	r2, r3
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fa19 	bl	80024da <UART_Start_Receive_IT>
 80020a8:	4603      	mov	r3, r0
 80020aa:	e000      	b.n	80020ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10d      	bne.n	800210a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_UART_IRQHandler+0x52>
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fac9 	bl	800269a <UART_Receive_IT>
      return;
 8002108:	e17b      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80b1 	beq.w	8002274 <HAL_UART_IRQHandler+0x1bc>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <HAL_UART_IRQHandler+0x70>
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80a6 	beq.w	8002274 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_UART_IRQHandler+0x90>
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_UART_IRQHandler+0xb0>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_UART_IRQHandler+0xd0>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0204 	orr.w	r2, r3, #4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00f      	beq.n	80021b2 <HAL_UART_IRQHandler+0xfa>
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <HAL_UART_IRQHandler+0xee>
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0208 	orr.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 811e 	beq.w	80023f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_UART_IRQHandler+0x11e>
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fa62 	bl	800269a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <HAL_UART_IRQHandler+0x146>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d031      	beq.n	8002262 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f9a4 	bl	800254c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d023      	beq.n	800225a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002220:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	2b00      	cmp	r3, #0
 8002228:	d013      	beq.n	8002252 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	4a76      	ldr	r2, [pc, #472]	; (8002408 <HAL_UART_IRQHandler+0x350>)
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fd6e 	bl	8000d18 <HAL_DMA_Abort_IT>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800224c:	4610      	mov	r0, r2
 800224e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002250:	e00e      	b.n	8002270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8e3 	bl	800241e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	e00a      	b.n	8002270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8df 	bl	800241e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002260:	e006      	b.n	8002270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f8db 	bl	800241e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800226e:	e0c3      	b.n	80023f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002270:	bf00      	nop
    return;
 8002272:	e0c1      	b.n	80023f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 80a1 	bne.w	80023c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 809b 	beq.w	80023c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8095 	beq.w	80023c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d04e      	beq.n	8002358 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80022c4:	8a3b      	ldrh	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8098 	beq.w	80023fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022d0:	8a3a      	ldrh	r2, [r7, #16]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f080 8092 	bcs.w	80023fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8a3a      	ldrh	r2, [r7, #16]
 80022dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d02b      	beq.n	8002340 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002316:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fcb1 	bl	8000ca2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002348:	b29b      	uxth	r3, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	b29b      	uxth	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f86d 	bl	8002430 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002356:	e051      	b.n	80023fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002360:	b29b      	uxth	r3, r3
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d047      	beq.n	8002400 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002370:	8a7b      	ldrh	r3, [r7, #18]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d044      	beq.n	8002400 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002384:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0210 	bic.w	r2, r2, #16
 80023b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023b4:	8a7b      	ldrh	r3, [r7, #18]
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f839 	bl	8002430 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80023be:	e01f      	b.n	8002400 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_UART_IRQHandler+0x324>
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8f9 	bl	80025cc <UART_Transmit_IT>
    return;
 80023da:	e012      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_UART_IRQHandler+0x34a>
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f93a 	bl	800266a <UART_EndTransmit_IT>
    return;
 80023f6:	e004      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
    return;
 80023f8:	bf00      	nop
 80023fa:	e002      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
      return;
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
      return;
 8002400:	bf00      	nop
  }
}
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	080025a5 	.word	0x080025a5

0800240c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4613      	mov	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002456:	e02c      	b.n	80024b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245e:	d028      	beq.n	80024b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <UART_WaitOnFlagUntilTimeout+0x30>
 8002466:	f7fe fb33 	bl	8000ad0 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	429a      	cmp	r2, r3
 8002474:	d21d      	bcs.n	80024b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002484:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e00f      	b.n	80024d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d0c3      	beq.n	8002458 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	4613      	mov	r3, r2
 80024e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	88fa      	ldrh	r2, [r7, #6]
 80024f2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2222      	movs	r2, #34	; 0x22
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0220 	orr.w	r2, r2, #32
 800253e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002562:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0210 	bic.w	r2, r2, #16
 800258a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff ff2d 	bl	800241e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b21      	cmp	r3, #33	; 0x21
 80025de:	d13e      	bne.n	800265e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e8:	d114      	bne.n	8002614 <UART_Transmit_IT+0x48>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d110      	bne.n	8002614 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002606:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	1c9a      	adds	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	621a      	str	r2, [r3, #32]
 8002612:	e008      	b.n	8002626 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	1c59      	adds	r1, r3, #1
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6211      	str	r1, [r2, #32]
 800261e:	781a      	ldrb	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4619      	mov	r1, r3
 8002634:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002648:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002658:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002680:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff febe 	bl	800240c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b22      	cmp	r3, #34	; 0x22
 80026ac:	f040 8099 	bne.w	80027e2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b8:	d117      	bne.n	80026ea <UART_Receive_IT+0x50>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d113      	bne.n	80026ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d8:	b29a      	uxth	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	1c9a      	adds	r2, r3, #2
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
 80026e8:	e026      	b.n	8002738 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fc:	d007      	beq.n	800270e <UART_Receive_IT+0x74>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <UART_Receive_IT+0x82>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e008      	b.n	800272e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002728:	b2da      	uxtb	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29b      	uxth	r3, r3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4619      	mov	r1, r3
 8002746:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002748:	2b00      	cmp	r3, #0
 800274a:	d148      	bne.n	80027de <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0220 	bic.w	r2, r2, #32
 800275a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800276a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	2b01      	cmp	r3, #1
 800278a:	d123      	bne.n	80027d4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0210 	bic.w	r2, r2, #16
 80027a0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d10a      	bne.n	80027c6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fe2f 	bl	8002430 <HAL_UARTEx_RxEventCallback>
 80027d2:	e002      	b.n	80027da <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7fd fcdd 	bl	8000194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e002      	b.n	80027e4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002826:	f023 030c 	bic.w	r3, r3, #12
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	430b      	orrs	r3, r1
 8002832:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <UART_SetConfig+0x114>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d103      	bne.n	800285c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002854:	f7ff f874 	bl	8001940 <HAL_RCC_GetPCLK2Freq>
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	e002      	b.n	8002862 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800285c:	f7ff f85c 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 8002860:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	4a22      	ldr	r2, [pc, #136]	; (8002904 <UART_SetConfig+0x118>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	0119      	lsls	r1, r3, #4
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009a      	lsls	r2, r3, #2
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fbb2 f2f3 	udiv	r2, r2, r3
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <UART_SetConfig+0x118>)
 800289a:	fba3 0302 	umull	r0, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2064      	movs	r0, #100	; 0x64
 80028a2:	fb00 f303 	mul.w	r3, r0, r3
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	3332      	adds	r3, #50	; 0x32
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <UART_SetConfig+0x118>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b8:	4419      	add	r1, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009a      	lsls	r2, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <UART_SetConfig+0x118>)
 80028d2:	fba3 0302 	umull	r0, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2064      	movs	r0, #100	; 0x64
 80028da:	fb00 f303 	mul.w	r3, r0, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <UART_SetConfig+0x118>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	440a      	add	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40013800 	.word	0x40013800
 8002904:	51eb851f 	.word	0x51eb851f

08002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f103 0208 	add.w	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f103 0208 	add.w	r2, r3, #8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f103 0208 	add.w	r2, r3, #8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d103      	bne.n	80029c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e00c      	b.n	80029de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3308      	adds	r3, #8
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e002      	b.n	80029d2 <vListInsert+0x2e>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d2f6      	bcs.n	80029cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6892      	ldr	r2, [r2, #8]
 8002a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6852      	ldr	r2, [r2, #4]
 8002a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d103      	bne.n	8002a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a92:	f001 fcb3 	bl	80043fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	441a      	add	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	441a      	add	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	22ff      	movs	r2, #255	; 0xff
 8002ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d114      	bne.n	8002b12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01a      	beq.n	8002b26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3310      	adds	r3, #16
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 ff8d 	bl	8003a14 <xTaskRemoveFromEventList>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d012      	beq.n	8002b26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <xQueueGenericReset+0xcc>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	e009      	b.n	8002b26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3310      	adds	r3, #16
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fef6 	bl	8002908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3324      	adds	r3, #36	; 0x24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fef1 	bl	8002908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b26:	f001 fc99 	bl	800445c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	e000ed04 	.word	0xe000ed04

08002b38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	613b      	str	r3, [r7, #16]
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	e004      	b.n	8002b78 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	3348      	adds	r3, #72	; 0x48
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fcff 	bl	8004580 <pvPortMalloc>
 8002b82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00f      	beq.n	8002baa <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	3348      	adds	r3, #72	; 0x48
 8002b8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b98:	79fa      	ldrb	r2, [r7, #7]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f805 	bl	8002bb4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002baa:	69bb      	ldr	r3, [r7, #24]
	}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e002      	b.n	8002bd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002be2:	2101      	movs	r1, #1
 8002be4:	69b8      	ldr	r0, [r7, #24]
 8002be6:	f7ff ff3f 	bl	8002a68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c02:	2300      	movs	r3, #0
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <xQueueGenericSend+0x32>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <xQueueGenericSend+0x40>
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <xQueueGenericSend+0x44>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <xQueueGenericSend+0x46>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <xQueueGenericSend+0x60>
	__asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c50:	bf00      	nop
 8002c52:	e7fe      	b.n	8002c52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d103      	bne.n	8002c62 <xQueueGenericSend+0x6e>
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <xQueueGenericSend+0x72>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <xQueueGenericSend+0x74>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	623b      	str	r3, [r7, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c82:	f001 f887 	bl	8003d94 <xTaskGetSchedulerState>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <xQueueGenericSend+0x9e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <xQueueGenericSend+0xa2>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <xQueueGenericSend+0xa4>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	61fb      	str	r3, [r7, #28]
}
 8002cae:	bf00      	nop
 8002cb0:	e7fe      	b.n	8002cb0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cb2:	f001 fba3 	bl	80043fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <xQueueGenericSend+0xd4>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d129      	bne.n	8002d1c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cce:	f000 f9b2 	bl	8003036 <prvCopyDataToQueue>
 8002cd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	3324      	adds	r3, #36	; 0x24
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fe97 	bl	8003a14 <xTaskRemoveFromEventList>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d013      	beq.n	8002d14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cec:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <xQueueGenericSend+0x1f8>)
 8002cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	e00a      	b.n	8002d14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d04:	4b39      	ldr	r3, [pc, #228]	; (8002dec <xQueueGenericSend+0x1f8>)
 8002d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d14:	f001 fba2 	bl	800445c <vPortExitCritical>
				return pdPASS;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e063      	b.n	8002de4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d22:	f001 fb9b 	bl	800445c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e05c      	b.n	8002de4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d106      	bne.n	8002d3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fecf 	bl	8003ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d3e:	f001 fb8d 	bl	800445c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d42:	f000 fc81 	bl	8003648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d46:	f001 fb59 	bl	80043fc <vPortEnterCritical>
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d103      	bne.n	8002d60 <xQueueGenericSend+0x16c>
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d103      	bne.n	8002d76 <xQueueGenericSend+0x182>
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d76:	f001 fb71 	bl	800445c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d7a:	1d3a      	adds	r2, r7, #4
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 febe 	bl	8003b04 <xTaskCheckForTimeOut>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d124      	bne.n	8002dd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d90:	f000 fa23 	bl	80031da <prvIsQueueFull>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d018      	beq.n	8002dcc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	3310      	adds	r3, #16
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fe12 	bl	80039cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002daa:	f000 f9ae 	bl	800310a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dae:	f000 fc59 	bl	8003664 <xTaskResumeAll>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f47f af7c 	bne.w	8002cb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <xQueueGenericSend+0x1f8>)
 8002dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	e772      	b.n	8002cb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dce:	f000 f99c 	bl	800310a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dd2:	f000 fc47 	bl	8003664 <xTaskResumeAll>
 8002dd6:	e76c      	b.n	8002cb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dda:	f000 f996 	bl	800310a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dde:	f000 fc41 	bl	8003664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002de2:	2300      	movs	r3, #0
		}
	}
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3738      	adds	r7, #56	; 0x38
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	e000ed04 	.word	0xe000ed04

08002df0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08e      	sub	sp, #56	; 0x38
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	623b      	str	r3, [r7, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	61fb      	str	r3, [r7, #28]
}
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e40:	f000 ffa8 	bl	8003d94 <xTaskGetSchedulerState>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <xQueueSemaphoreTake+0x60>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <xQueueSemaphoreTake+0x64>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <xQueueSemaphoreTake+0x66>
 8002e54:	2300      	movs	r3, #0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	61bb      	str	r3, [r7, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e70:	f001 fac4 	bl	80043fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d024      	beq.n	8002eca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002e90:	f001 f94a 	bl	8004128 <pvTaskIncrementMutexHeldCount>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00f      	beq.n	8002ec2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	3310      	adds	r3, #16
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fdb4 	bl	8003a14 <xTaskRemoveFromEventList>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eb2:	4b54      	ldr	r3, [pc, #336]	; (8003004 <xQueueSemaphoreTake+0x214>)
 8002eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ec2:	f001 facb 	bl	800445c <vPortExitCritical>
				return pdPASS;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e097      	b.n	8002ffa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	617b      	str	r3, [r7, #20]
}
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002eec:	f001 fab6 	bl	800445c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e082      	b.n	8002ffa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002efa:	f107 030c 	add.w	r3, r7, #12
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fdea 	bl	8003ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f08:	f001 faa8 	bl	800445c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f0c:	f000 fb9c 	bl	8003648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f10:	f001 fa74 	bl	80043fc <vPortEnterCritical>
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d103      	bne.n	8002f2a <xQueueSemaphoreTake+0x13a>
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d103      	bne.n	8002f40 <xQueueSemaphoreTake+0x150>
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f40:	f001 fa8c 	bl	800445c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f44:	463a      	mov	r2, r7
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fdd9 	bl	8003b04 <xTaskCheckForTimeOut>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d132      	bne.n	8002fbe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f5a:	f000 f928 	bl	80031ae <prvIsQueueEmpty>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d026      	beq.n	8002fb2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002f6c:	f001 fa46 	bl	80043fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 ff2b 	bl	8003dd0 <xTaskPriorityInherit>
 8002f7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002f7c:	f001 fa6e 	bl	800445c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	3324      	adds	r3, #36	; 0x24
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fd1f 	bl	80039cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f90:	f000 f8bb 	bl	800310a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f94:	f000 fb66 	bl	8003664 <xTaskResumeAll>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f47f af68 	bne.w	8002e70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <xQueueSemaphoreTake+0x214>)
 8002fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	e75e      	b.n	8002e70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fb4:	f000 f8a9 	bl	800310a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fb8:	f000 fb54 	bl	8003664 <xTaskResumeAll>
 8002fbc:	e758      	b.n	8002e70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fc0:	f000 f8a3 	bl	800310a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fc4:	f000 fb4e 	bl	8003664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fca:	f000 f8f0 	bl	80031ae <prvIsQueueEmpty>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f43f af4d 	beq.w	8002e70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00d      	beq.n	8002ff8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002fdc:	f001 fa0e 	bl	80043fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fe2:	f000 f811 	bl	8003008 <prvGetDisinheritPriorityAfterTimeout>
 8002fe6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fffa 	bl	8003fe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002ff4:	f001 fa32 	bl	800445c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3738      	adds	r7, #56	; 0x38
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1c3 0307 	rsb	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e001      	b.n	800302a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800302a:	68fb      	ldr	r3, [r7, #12]
	}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d14d      	bne.n	80030f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 ff3b 	bl	8003edc <xTaskPriorityDisinherit>
 8003066:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	e043      	b.n	80030f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d119      	bne.n	80030aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6898      	ldr	r0, [r3, #8]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	461a      	mov	r2, r3
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	f001 fc83 	bl	800498c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	d32b      	bcc.n	80030f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e026      	b.n	80030f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68d8      	ldr	r0, [r3, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	461a      	mov	r2, r3
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	f001 fc69 	bl	800498c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	425b      	negs	r3, r3
 80030c4:	441a      	add	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d207      	bcs.n	80030e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	425b      	negs	r3, r3
 80030e0:	441a      	add	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d105      	bne.n	80030f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003100:	697b      	ldr	r3, [r7, #20]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003112:	f001 f973 	bl	80043fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800311e:	e011      	b.n	8003144 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d012      	beq.n	800314e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3324      	adds	r3, #36	; 0x24
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fc71 	bl	8003a14 <xTaskRemoveFromEventList>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003138:	f000 fd46 	bl	8003bc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	3b01      	subs	r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003148:	2b00      	cmp	r3, #0
 800314a:	dce9      	bgt.n	8003120 <prvUnlockQueue+0x16>
 800314c:	e000      	b.n	8003150 <prvUnlockQueue+0x46>
					break;
 800314e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003158:	f001 f980 	bl	800445c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800315c:	f001 f94e 	bl	80043fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003166:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003168:	e011      	b.n	800318e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3310      	adds	r3, #16
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fc4c 	bl	8003a14 <xTaskRemoveFromEventList>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003182:	f000 fd21 	bl	8003bc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003186:	7bbb      	ldrb	r3, [r7, #14]
 8003188:	3b01      	subs	r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800318e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003192:	2b00      	cmp	r3, #0
 8003194:	dce9      	bgt.n	800316a <prvUnlockQueue+0x60>
 8003196:	e000      	b.n	800319a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003198:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031a2:	f001 f95b 	bl	800445c <vPortExitCritical>
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031b6:	f001 f921 	bl	80043fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031c2:	2301      	movs	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e001      	b.n	80031cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031cc:	f001 f946 	bl	800445c <vPortExitCritical>

	return xReturn;
 80031d0:	68fb      	ldr	r3, [r7, #12]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031e2:	f001 f90b 	bl	80043fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d102      	bne.n	80031f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031f2:	2301      	movs	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	e001      	b.n	80031fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031fc:	f001 f92e 	bl	800445c <vPortExitCritical>

	return xReturn;
 8003200:	68fb      	ldr	r3, [r7, #12]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800320a:	b580      	push	{r7, lr}
 800320c:	b08e      	sub	sp, #56	; 0x38
 800320e:	af04      	add	r7, sp, #16
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <xTaskCreateStatic+0x2a>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	623b      	str	r3, [r7, #32]
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <xTaskCreateStatic+0x46>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	61fb      	str	r3, [r7, #28]
}
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003250:	2354      	movs	r3, #84	; 0x54
 8003252:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b54      	cmp	r3, #84	; 0x54
 8003258:	d00a      	beq.n	8003270 <xTaskCreateStatic+0x66>
	__asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	61bb      	str	r3, [r7, #24]
}
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01e      	beq.n	80032b4 <xTaskCreateStatic+0xaa>
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800327c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003284:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	2202      	movs	r2, #2
 800328a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800328e:	2300      	movs	r3, #0
 8003290:	9303      	str	r3, [sp, #12]
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	9302      	str	r3, [sp, #8]
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f850 	bl	800334c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ae:	f000 f8cd 	bl	800344c <prvAddNewTaskToReadyList>
 80032b2:	e001      	b.n	80032b8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032b8:	697b      	ldr	r3, [r7, #20]
	}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3728      	adds	r7, #40	; 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b08c      	sub	sp, #48	; 0x30
 80032c6:	af04      	add	r7, sp, #16
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f952 	bl	8004580 <pvPortMalloc>
 80032dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80032e4:	2054      	movs	r0, #84	; 0x54
 80032e6:	f001 f94b 	bl	8004580 <pvPortMalloc>
 80032ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
 80032f8:	e005      	b.n	8003306 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032fa:	6978      	ldr	r0, [r7, #20]
 80032fc:	f001 fa04 	bl	8004708 <vPortFree>
 8003300:	e001      	b.n	8003306 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d017      	beq.n	800333c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003314:	88fa      	ldrh	r2, [r7, #6]
 8003316:	2300      	movs	r3, #0
 8003318:	9303      	str	r3, [sp, #12]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	9302      	str	r3, [sp, #8]
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f80e 	bl	800334c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003330:	69f8      	ldr	r0, [r7, #28]
 8003332:	f000 f88b 	bl	800344c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003336:	2301      	movs	r3, #1
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e002      	b.n	8003342 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003342:	69bb      	ldr	r3, [r7, #24]
	}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003364:	3b01      	subs	r3, #1
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <prvInitialiseNewTask+0x48>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	617b      	str	r3, [r7, #20]
}
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e012      	b.n	80033c0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	7819      	ldrb	r1, [r3, #0]
 80033a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	3334      	adds	r3, #52	; 0x34
 80033aa:	460a      	mov	r2, r1
 80033ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	d9e9      	bls.n	800339a <prvInitialiseNewTask+0x4e>
 80033c6:	e000      	b.n	80033ca <prvInitialiseNewTask+0x7e>
		{
			break;
 80033c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	2b06      	cmp	r3, #6
 80033d6:	d901      	bls.n	80033dc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033d8:	2306      	movs	r3, #6
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	2200      	movs	r2, #0
 80033ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	3304      	adds	r3, #4
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff faa7 	bl	8002946 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	3318      	adds	r3, #24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff faa2 	bl	8002946 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003406:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	f1c3 0207 	rsb	r2, r3, #7
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003416:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	2200      	movs	r2, #0
 800341c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	69b8      	ldr	r0, [r7, #24]
 800342c:	f000 fef6 	bl	800421c <pxPortInitialiseStack>
 8003430:	4602      	mov	r2, r0
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003442:	bf00      	nop
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003454:	f000 ffd2 	bl	80043fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003458:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <prvAddNewTaskToReadyList+0xb8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	4a29      	ldr	r2, [pc, #164]	; (8003504 <prvAddNewTaskToReadyList+0xb8>)
 8003460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <prvAddNewTaskToReadyList+0xbc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800346a:	4a27      	ldr	r2, [pc, #156]	; (8003508 <prvAddNewTaskToReadyList+0xbc>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <prvAddNewTaskToReadyList+0xb8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d110      	bne.n	800349a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003478:	f000 fbca 	bl	8003c10 <prvInitialiseTaskLists>
 800347c:	e00d      	b.n	800349a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <prvAddNewTaskToReadyList+0xc0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <prvAddNewTaskToReadyList+0xbc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	429a      	cmp	r2, r3
 8003492:	d802      	bhi.n	800349a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003494:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <prvAddNewTaskToReadyList+0xbc>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <prvAddNewTaskToReadyList+0xc4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <prvAddNewTaskToReadyList+0xc4>)
 80034a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	2201      	movs	r2, #1
 80034aa:	409a      	lsls	r2, r3
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <prvAddNewTaskToReadyList+0xc8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	4a18      	ldr	r2, [pc, #96]	; (8003514 <prvAddNewTaskToReadyList+0xc8>)
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <prvAddNewTaskToReadyList+0xcc>)
 80034c4:	441a      	add	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7ff fa46 	bl	800295e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034d2:	f000 ffc3 	bl	800445c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <prvAddNewTaskToReadyList+0xc0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00e      	beq.n	80034fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <prvAddNewTaskToReadyList+0xbc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d207      	bcs.n	80034fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <prvAddNewTaskToReadyList+0xd0>)
 80034ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000420 	.word	0x20000420
 8003508:	20000320 	.word	0x20000320
 800350c:	2000042c 	.word	0x2000042c
 8003510:	2000043c 	.word	0x2000043c
 8003514:	20000428 	.word	0x20000428
 8003518:	20000324 	.word	0x20000324
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d017      	beq.n	8003562 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <vTaskDelay+0x60>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <vTaskDelay+0x30>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	60bb      	str	r3, [r7, #8]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003550:	f000 f87a 	bl	8003648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003554:	2100      	movs	r1, #0
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fdfa 	bl	8004150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800355c:	f000 f882 	bl	8003664 <xTaskResumeAll>
 8003560:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d107      	bne.n	8003578 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <vTaskDelay+0x64>)
 800356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000448 	.word	0x20000448
 8003584:	e000ed04 	.word	0xe000ed04

08003588 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003596:	463a      	mov	r2, r7
 8003598:	1d39      	adds	r1, r7, #4
 800359a:	f107 0308 	add.w	r3, r7, #8
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc fde0 	bl	8000164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	9202      	str	r2, [sp, #8]
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	460a      	mov	r2, r1
 80035b6:	491e      	ldr	r1, [pc, #120]	; (8003630 <vTaskStartScheduler+0xa8>)
 80035b8:	481e      	ldr	r0, [pc, #120]	; (8003634 <vTaskStartScheduler+0xac>)
 80035ba:	f7ff fe26 	bl	800320a <xTaskCreateStatic>
 80035be:	4603      	mov	r3, r0
 80035c0:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <vTaskStartScheduler+0xb0>)
 80035c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035c4:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <vTaskStartScheduler+0xb0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035cc:	2301      	movs	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e001      	b.n	80035d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d116      	bne.n	800360a <vTaskStartScheduler+0x82>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	613b      	str	r3, [r7, #16]
}
 80035ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <vTaskStartScheduler+0xb4>)
 80035f2:	f04f 32ff 	mov.w	r2, #4294967295
 80035f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <vTaskStartScheduler+0xb8>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <vTaskStartScheduler+0xbc>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003604:	f000 fe88 	bl	8004318 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003608:	e00e      	b.n	8003628 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d10a      	bne.n	8003628 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	60fb      	str	r3, [r7, #12]
}
 8003624:	bf00      	nop
 8003626:	e7fe      	b.n	8003626 <vTaskStartScheduler+0x9e>
}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	08005d14 	.word	0x08005d14
 8003634:	08003be1 	.word	0x08003be1
 8003638:	20000444 	.word	0x20000444
 800363c:	20000440 	.word	0x20000440
 8003640:	2000042c 	.word	0x2000042c
 8003644:	20000424 	.word	0x20000424

08003648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <vTaskSuspendAll+0x18>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a03      	ldr	r2, [pc, #12]	; (8003660 <vTaskSuspendAll+0x18>)
 8003654:	6013      	str	r3, [r2, #0]
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000448 	.word	0x20000448

08003664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003672:	4b41      	ldr	r3, [pc, #260]	; (8003778 <xTaskResumeAll+0x114>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <xTaskResumeAll+0x2c>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	603b      	str	r3, [r7, #0]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003690:	f000 feb4 	bl	80043fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003694:	4b38      	ldr	r3, [pc, #224]	; (8003778 <xTaskResumeAll+0x114>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	4a37      	ldr	r2, [pc, #220]	; (8003778 <xTaskResumeAll+0x114>)
 800369c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800369e:	4b36      	ldr	r3, [pc, #216]	; (8003778 <xTaskResumeAll+0x114>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d161      	bne.n	800376a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036a6:	4b35      	ldr	r3, [pc, #212]	; (800377c <xTaskResumeAll+0x118>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d05d      	beq.n	800376a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ae:	e02e      	b.n	800370e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036b0:	4b33      	ldr	r3, [pc, #204]	; (8003780 <xTaskResumeAll+0x11c>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3318      	adds	r3, #24
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff f9a9 	bl	8002a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f9a4 	bl	8002a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2201      	movs	r2, #1
 80036d2:	409a      	lsls	r2, r3
 80036d4:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <xTaskResumeAll+0x120>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <xTaskResumeAll+0x120>)
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4a27      	ldr	r2, [pc, #156]	; (8003788 <xTaskResumeAll+0x124>)
 80036ec:	441a      	add	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7ff f932 	bl	800295e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fe:	4b23      	ldr	r3, [pc, #140]	; (800378c <xTaskResumeAll+0x128>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	429a      	cmp	r2, r3
 8003706:	d302      	bcc.n	800370e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <xTaskResumeAll+0x12c>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <xTaskResumeAll+0x11c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1cc      	bne.n	80036b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800371c:	f000 fb16 	bl	8003d4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <xTaskResumeAll+0x130>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d010      	beq.n	800374e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800372c:	f000 f836 	bl	800379c <xTaskIncrementTick>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <xTaskResumeAll+0x12c>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f1      	bne.n	800372c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <xTaskResumeAll+0x130>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <xTaskResumeAll+0x12c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003756:	2301      	movs	r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <xTaskResumeAll+0x134>)
 800375c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800376a:	f000 fe77 	bl	800445c <vPortExitCritical>

	return xAlreadyYielded;
 800376e:	68bb      	ldr	r3, [r7, #8]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000448 	.word	0x20000448
 800377c:	20000420 	.word	0x20000420
 8003780:	200003e0 	.word	0x200003e0
 8003784:	20000428 	.word	0x20000428
 8003788:	20000324 	.word	0x20000324
 800378c:	20000320 	.word	0x20000320
 8003790:	20000434 	.word	0x20000434
 8003794:	20000430 	.word	0x20000430
 8003798:	e000ed04 	.word	0xe000ed04

0800379c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a6:	4b51      	ldr	r3, [pc, #324]	; (80038ec <xTaskIncrementTick+0x150>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 808d 	bne.w	80038ca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <xTaskIncrementTick+0x154>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037b8:	4a4d      	ldr	r2, [pc, #308]	; (80038f0 <xTaskIncrementTick+0x154>)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d120      	bne.n	8003806 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037c4:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <xTaskIncrementTick+0x158>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	603b      	str	r3, [r7, #0]
}
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <xTaskIncrementTick+0x46>
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <xTaskIncrementTick+0x158>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <xTaskIncrementTick+0x15c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a41      	ldr	r2, [pc, #260]	; (80038f4 <xTaskIncrementTick+0x158>)
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4a41      	ldr	r2, [pc, #260]	; (80038f8 <xTaskIncrementTick+0x15c>)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b40      	ldr	r3, [pc, #256]	; (80038fc <xTaskIncrementTick+0x160>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	4a3f      	ldr	r2, [pc, #252]	; (80038fc <xTaskIncrementTick+0x160>)
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	f000 faa3 	bl	8003d4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <xTaskIncrementTick+0x164>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d34d      	bcc.n	80038ac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003810:	4b38      	ldr	r3, [pc, #224]	; (80038f4 <xTaskIncrementTick+0x158>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <xTaskIncrementTick+0x82>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xTaskIncrementTick+0x84>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003824:	4b36      	ldr	r3, [pc, #216]	; (8003900 <xTaskIncrementTick+0x164>)
 8003826:	f04f 32ff 	mov.w	r2, #4294967295
 800382a:	601a      	str	r2, [r3, #0]
					break;
 800382c:	e03e      	b.n	80038ac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800382e:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <xTaskIncrementTick+0x158>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d203      	bcs.n	800384e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003846:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <xTaskIncrementTick+0x164>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6013      	str	r3, [r2, #0]
						break;
 800384c:	e02e      	b.n	80038ac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3304      	adds	r3, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff f8de 	bl	8002a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3318      	adds	r3, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f8d5 	bl	8002a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	2201      	movs	r2, #1
 8003870:	409a      	lsls	r2, r3
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <xTaskIncrementTick+0x168>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <xTaskIncrementTick+0x168>)
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <xTaskIncrementTick+0x16c>)
 800388a:	441a      	add	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7ff f863 	bl	800295e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <xTaskIncrementTick+0x170>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3b4      	bcc.n	8003810 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038aa:	e7b1      	b.n	8003810 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <xTaskIncrementTick+0x170>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b2:	4915      	ldr	r1, [pc, #84]	; (8003908 <xTaskIncrementTick+0x16c>)
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d907      	bls.n	80038d4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e004      	b.n	80038d4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <xTaskIncrementTick+0x174>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	4a0f      	ldr	r2, [pc, #60]	; (8003910 <xTaskIncrementTick+0x174>)
 80038d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <xTaskIncrementTick+0x178>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038e0:	697b      	ldr	r3, [r7, #20]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000448 	.word	0x20000448
 80038f0:	20000424 	.word	0x20000424
 80038f4:	200003d8 	.word	0x200003d8
 80038f8:	200003dc 	.word	0x200003dc
 80038fc:	20000438 	.word	0x20000438
 8003900:	20000440 	.word	0x20000440
 8003904:	20000428 	.word	0x20000428
 8003908:	20000324 	.word	0x20000324
 800390c:	20000320 	.word	0x20000320
 8003910:	20000430 	.word	0x20000430
 8003914:	20000434 	.word	0x20000434

08003918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800391e:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <vTaskSwitchContext+0xa0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <vTaskSwitchContext+0xa4>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800392c:	e03f      	b.n	80039ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <vTaskSwitchContext+0xa4>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <vTaskSwitchContext+0xa8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003942:	7afb      	ldrb	r3, [r7, #11]
 8003944:	f1c3 031f 	rsb	r3, r3, #31
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	491e      	ldr	r1, [pc, #120]	; (80039c4 <vTaskSwitchContext+0xac>)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <vTaskSwitchContext+0x5c>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	607b      	str	r3, [r7, #4]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vTaskSwitchContext+0x5a>
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <vTaskSwitchContext+0xac>)
 8003980:	4413      	add	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3308      	adds	r3, #8
 8003996:	429a      	cmp	r2, r3
 8003998:	d104      	bne.n	80039a4 <vTaskSwitchContext+0x8c>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <vTaskSwitchContext+0xb0>)
 80039ac:	6013      	str	r3, [r2, #0]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	20000448 	.word	0x20000448
 80039bc:	20000434 	.word	0x20000434
 80039c0:	20000428 	.word	0x20000428
 80039c4:	20000324 	.word	0x20000324
 80039c8:	20000320 	.word	0x20000320

080039cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	60fb      	str	r3, [r7, #12]
}
 80039ee:	bf00      	nop
 80039f0:	e7fe      	b.n	80039f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039f2:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <vTaskPlaceOnEventList+0x44>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3318      	adds	r3, #24
 80039f8:	4619      	mov	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fe ffd2 	bl	80029a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a00:	2101      	movs	r1, #1
 8003a02:	6838      	ldr	r0, [r7, #0]
 8003a04:	f000 fba4 	bl	8004150 <prvAddCurrentTaskToDelayedList>
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000320 	.word	0x20000320

08003a14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	60fb      	str	r3, [r7, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	3318      	adds	r3, #24
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe ffe5 	bl	8002a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <xTaskRemoveFromEventList+0xac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11c      	bne.n	8003a8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	3304      	adds	r3, #4
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe ffdc 	bl	8002a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	2201      	movs	r2, #1
 8003a62:	409a      	lsls	r2, r3
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <xTaskRemoveFromEventList+0xb0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <xTaskRemoveFromEventList+0xb0>)
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <xTaskRemoveFromEventList+0xb4>)
 8003a7c:	441a      	add	r2, r3
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f7fe ff6a 	bl	800295e <vListInsertEnd>
 8003a8a:	e005      	b.n	8003a98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	3318      	adds	r3, #24
 8003a90:	4619      	mov	r1, r3
 8003a92:	480e      	ldr	r0, [pc, #56]	; (8003acc <xTaskRemoveFromEventList+0xb8>)
 8003a94:	f7fe ff63 	bl	800295e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xTaskRemoveFromEventList+0xbc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d905      	bls.n	8003ab2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <xTaskRemoveFromEventList+0xc0>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e001      	b.n	8003ab6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003ab6:	697b      	ldr	r3, [r7, #20]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000448 	.word	0x20000448
 8003ac4:	20000428 	.word	0x20000428
 8003ac8:	20000324 	.word	0x20000324
 8003acc:	200003e0 	.word	0x200003e0
 8003ad0:	20000320 	.word	0x20000320
 8003ad4:	20000434 	.word	0x20000434

08003ad8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <vTaskInternalSetTimeOutState+0x24>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <vTaskInternalSetTimeOutState+0x28>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	605a      	str	r2, [r3, #4]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000438 	.word	0x20000438
 8003b00:	20000424 	.word	0x20000424

08003b04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	613b      	str	r3, [r7, #16]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b46:	f000 fc59 	bl	80043fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <xTaskCheckForTimeOut+0xbc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d102      	bne.n	8003b6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e023      	b.n	8003bb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <xTaskCheckForTimeOut+0xc0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d007      	beq.n	8003b86 <xTaskCheckForTimeOut+0x82>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	e015      	b.n	8003bb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d20b      	bcs.n	8003ba8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad2      	subs	r2, r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff9b 	bl	8003ad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	e004      	b.n	8003bb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bb2:	f000 fc53 	bl	800445c <vPortExitCritical>

	return xReturn;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000424 	.word	0x20000424
 8003bc4:	20000438 	.word	0x20000438

08003bc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <vTaskMissedYield+0x14>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000434 	.word	0x20000434

08003be0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003be8:	f000 f852 	bl	8003c90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <prvIdleTask+0x28>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d9f9      	bls.n	8003be8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <prvIdleTask+0x2c>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c04:	e7f0      	b.n	8003be8 <prvIdleTask+0x8>
 8003c06:	bf00      	nop
 8003c08:	20000324 	.word	0x20000324
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	e00c      	b.n	8003c36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <prvInitialiseTaskLists+0x60>)
 8003c28:	4413      	add	r3, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fe6c 	bl	8002908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3301      	adds	r3, #1
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b06      	cmp	r3, #6
 8003c3a:	d9ef      	bls.n	8003c1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c3c:	480d      	ldr	r0, [pc, #52]	; (8003c74 <prvInitialiseTaskLists+0x64>)
 8003c3e:	f7fe fe63 	bl	8002908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c42:	480d      	ldr	r0, [pc, #52]	; (8003c78 <prvInitialiseTaskLists+0x68>)
 8003c44:	f7fe fe60 	bl	8002908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c48:	480c      	ldr	r0, [pc, #48]	; (8003c7c <prvInitialiseTaskLists+0x6c>)
 8003c4a:	f7fe fe5d 	bl	8002908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c4e:	480c      	ldr	r0, [pc, #48]	; (8003c80 <prvInitialiseTaskLists+0x70>)
 8003c50:	f7fe fe5a 	bl	8002908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c54:	480b      	ldr	r0, [pc, #44]	; (8003c84 <prvInitialiseTaskLists+0x74>)
 8003c56:	f7fe fe57 	bl	8002908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <prvInitialiseTaskLists+0x78>)
 8003c5c:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <prvInitialiseTaskLists+0x64>)
 8003c5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <prvInitialiseTaskLists+0x7c>)
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <prvInitialiseTaskLists+0x68>)
 8003c64:	601a      	str	r2, [r3, #0]
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000324 	.word	0x20000324
 8003c74:	200003b0 	.word	0x200003b0
 8003c78:	200003c4 	.word	0x200003c4
 8003c7c:	200003e0 	.word	0x200003e0
 8003c80:	200003f4 	.word	0x200003f4
 8003c84:	2000040c 	.word	0x2000040c
 8003c88:	200003d8 	.word	0x200003d8
 8003c8c:	200003dc 	.word	0x200003dc

08003c90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c96:	e019      	b.n	8003ccc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c98:	f000 fbb0 	bl	80043fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c9c:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <prvCheckTasksWaitingTermination+0x50>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe feb3 	bl	8002a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <prvCheckTasksWaitingTermination+0x54>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ce4 <prvCheckTasksWaitingTermination+0x54>)
 8003cb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <prvCheckTasksWaitingTermination+0x58>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <prvCheckTasksWaitingTermination+0x58>)
 8003cc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cc2:	f000 fbcb 	bl	800445c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f810 	bl	8003cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <prvCheckTasksWaitingTermination+0x58>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e1      	bne.n	8003c98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200003f4 	.word	0x200003f4
 8003ce4:	20000420 	.word	0x20000420
 8003ce8:	20000408 	.word	0x20000408

08003cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fd00 	bl	8004708 <vPortFree>
				vPortFree( pxTCB );
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fcfd 	bl	8004708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d0e:	e018      	b.n	8003d42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d103      	bne.n	8003d22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fcf4 	bl	8004708 <vPortFree>
	}
 8003d20:	e00f      	b.n	8003d42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d00a      	beq.n	8003d42 <prvDeleteTCB+0x56>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60fb      	str	r3, [r7, #12]
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <prvDeleteTCB+0x54>
	}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <prvResetNextTaskUnblockTime+0x40>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <prvResetNextTaskUnblockTime+0x14>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <prvResetNextTaskUnblockTime+0x16>
 8003d60:	2300      	movs	r3, #0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <prvResetNextTaskUnblockTime+0x44>)
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d6e:	e008      	b.n	8003d82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <prvResetNextTaskUnblockTime+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <prvResetNextTaskUnblockTime+0x44>)
 8003d80:	6013      	str	r3, [r2, #0]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	200003d8 	.word	0x200003d8
 8003d90:	20000440 	.word	0x20000440

08003d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <xTaskGetSchedulerState+0x34>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003da2:	2301      	movs	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	e008      	b.n	8003dba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <xTaskGetSchedulerState+0x38>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003db0:	2302      	movs	r3, #2
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	e001      	b.n	8003dba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dba:	687b      	ldr	r3, [r7, #4]
	}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	2000042c 	.word	0x2000042c
 8003dcc:	20000448 	.word	0x20000448

08003dd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d06e      	beq.n	8003ec4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	4b39      	ldr	r3, [pc, #228]	; (8003ed0 <xTaskPriorityInherit+0x100>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d25e      	bcs.n	8003eb2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	db06      	blt.n	8003e0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dfc:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <xTaskPriorityInherit+0x100>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f1c3 0207 	rsb	r2, r3, #7
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6959      	ldr	r1, [r3, #20]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4a2e      	ldr	r2, [pc, #184]	; (8003ed4 <xTaskPriorityInherit+0x104>)
 8003e1c:	4413      	add	r3, r2
 8003e1e:	4299      	cmp	r1, r3
 8003e20:	d101      	bne.n	8003e26 <xTaskPriorityInherit+0x56>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <xTaskPriorityInherit+0x58>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d03a      	beq.n	8003ea2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fdef 	bl	8002a14 <uxListRemove>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d115      	bne.n	8003e68 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	4924      	ldr	r1, [pc, #144]	; (8003ed4 <xTaskPriorityInherit+0x104>)
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <xTaskPriorityInherit+0x98>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	2201      	movs	r2, #1
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43da      	mvns	r2, r3
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <xTaskPriorityInherit+0x108>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4013      	ands	r3, r2
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <xTaskPriorityInherit+0x108>)
 8003e66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <xTaskPriorityInherit+0x100>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	2201      	movs	r2, #1
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <xTaskPriorityInherit+0x108>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <xTaskPriorityInherit+0x108>)
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <xTaskPriorityInherit+0x104>)
 8003e92:	441a      	add	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7fe fd5f 	bl	800295e <vListInsertEnd>
 8003ea0:	e004      	b.n	8003eac <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <xTaskPriorityInherit+0x100>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e008      	b.n	8003ec4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <xTaskPriorityInherit+0x100>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d201      	bcs.n	8003ec4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
	}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000320 	.word	0x20000320
 8003ed4:	20000324 	.word	0x20000324
 8003ed8:	20000428 	.word	0x20000428

08003edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d06e      	beq.n	8003fd0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	; (8003fdc <xTaskPriorityDisinherit+0x100>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d00a      	beq.n	8003f12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	60fb      	str	r3, [r7, #12]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	60bb      	str	r3, [r7, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d044      	beq.n	8003fd0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d140      	bne.n	8003fd0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fd5e 	bl	8002a14 <uxListRemove>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d115      	bne.n	8003f8a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	491f      	ldr	r1, [pc, #124]	; (8003fe0 <xTaskPriorityDisinherit+0x104>)
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <xTaskPriorityDisinherit+0xae>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	2201      	movs	r2, #1
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <xTaskPriorityDisinherit+0x108>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4013      	ands	r3, r2
 8003f86:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <xTaskPriorityDisinherit+0x108>)
 8003f88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f1c3 0207 	rsb	r2, r3, #7
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <xTaskPriorityDisinherit+0x108>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <xTaskPriorityDisinherit+0x108>)
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <xTaskPriorityDisinherit+0x104>)
 8003fbe:	441a      	add	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f7fe fcc9 	bl	800295e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fd0:	697b      	ldr	r3, [r7, #20]
	}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000320 	.word	0x20000320
 8003fe0:	20000324 	.word	0x20000324
 8003fe4:	20000428 	.word	0x20000428

08003fe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8088 	beq.w	8004112 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	60fb      	str	r3, [r7, #12]
}
 800401c:	bf00      	nop
 800401e:	e7fe      	b.n	800401e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d902      	bls.n	8004030 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e002      	b.n	8004036 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	429a      	cmp	r2, r3
 800403e:	d068      	beq.n	8004112 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	429a      	cmp	r2, r3
 8004048:	d163      	bne.n	8004112 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	429a      	cmp	r2, r3
 8004052:	d10a      	bne.n	800406a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60bb      	str	r3, [r7, #8]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db04      	blt.n	8004088 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f1c3 0207 	rsb	r2, r3, #7
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6959      	ldr	r1, [r3, #20]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004098:	4413      	add	r3, r2
 800409a:	4299      	cmp	r1, r3
 800409c:	d101      	bne.n	80040a2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d034      	beq.n	8004112 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe fcb1 	bl	8002a14 <uxListRemove>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d115      	bne.n	80040e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	4918      	ldr	r1, [pc, #96]	; (8004120 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	2201      	movs	r2, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43da      	mvns	r2, r3
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4013      	ands	r3, r2
 80040e0:	4a10      	ldr	r2, [pc, #64]	; (8004124 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80040e2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	2201      	movs	r2, #1
 80040ea:	409a      	lsls	r2, r3
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4a07      	ldr	r2, [pc, #28]	; (8004120 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004104:	441a      	add	r2, r3
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fe fc26 	bl	800295e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000320 	.word	0x20000320
 8004120:	20000324 	.word	0x20000324
 8004124:	20000428 	.word	0x20000428

08004128 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <pvTaskIncrementMutexHeldCount+0x24>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d004      	beq.n	800413e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <pvTaskIncrementMutexHeldCount+0x24>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800413a:	3201      	adds	r2, #1
 800413c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <pvTaskIncrementMutexHeldCount+0x24>)
 8004140:	681b      	ldr	r3, [r3, #0]
	}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000320 	.word	0x20000320

08004150 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800415a:	4b29      	ldr	r3, [pc, #164]	; (8004200 <prvAddCurrentTaskToDelayedList+0xb0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004160:	4b28      	ldr	r3, [pc, #160]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3304      	adds	r3, #4
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fc54 	bl	8002a14 <uxListRemove>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	2201      	movs	r2, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4013      	ands	r3, r2
 8004186:	4a20      	ldr	r2, [pc, #128]	; (8004208 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004188:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d10a      	bne.n	80041a8 <prvAddCurrentTaskToDelayedList+0x58>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	481a      	ldr	r0, [pc, #104]	; (800420c <prvAddCurrentTaskToDelayedList+0xbc>)
 80041a2:	f7fe fbdc 	bl	800295e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041a6:	e026      	b.n	80041f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d209      	bcs.n	80041d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7fe fbe9 	bl	80029a4 <vListInsert>
}
 80041d2:	e010      	b.n	80041f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d4:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fe fbdf 	bl	80029a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d202      	bcs.n	80041f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041f0:	4a09      	ldr	r2, [pc, #36]	; (8004218 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6013      	str	r3, [r2, #0]
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000424 	.word	0x20000424
 8004204:	20000320 	.word	0x20000320
 8004208:	20000428 	.word	0x20000428
 800420c:	2000040c 	.word	0x2000040c
 8004210:	200003dc 	.word	0x200003dc
 8004214:	200003d8 	.word	0x200003d8
 8004218:	20000440 	.word	0x20000440

0800421c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3b04      	subs	r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3b04      	subs	r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3b04      	subs	r3, #4
 800424a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800424c:	4a08      	ldr	r2, [pc, #32]	; (8004270 <pxPortInitialiseStack+0x54>)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b14      	subs	r3, #20
 8004256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b20      	subs	r3, #32
 8004262:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004264:	68fb      	ldr	r3, [r7, #12]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	08004275 	.word	0x08004275

08004274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <prvTaskExitError+0x54>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d00a      	beq.n	800429e <prvTaskExitError+0x2a>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <prvTaskExitError+0x28>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60bb      	str	r3, [r7, #8]
}
 80042b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042b2:	bf00      	nop
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0fc      	beq.n	80042b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	2000003c 	.word	0x2000003c
 80042cc:	00000000 	.word	0x00000000

080042d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <pxCurrentTCBConst2>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	6808      	ldr	r0, [r1, #0]
 80042d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042da:	f380 8809 	msr	PSP, r0
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80042ee:	4770      	bx	lr

080042f0 <pxCurrentTCBConst2>:
 80042f0:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042f8:	4806      	ldr	r0, [pc, #24]	; (8004314 <prvPortStartFirstTask+0x1c>)
 80042fa:	6800      	ldr	r0, [r0, #0]
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f380 8808 	msr	MSP, r0
 8004302:	b662      	cpsie	i
 8004304:	b661      	cpsie	f
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	df00      	svc	0
 8004310:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004312:	bf00      	nop
 8004314:	e000ed08 	.word	0xe000ed08

08004318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800431e:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <xPortStartScheduler+0xd0>)
 8004320:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <xPortStartScheduler+0xd4>)
 8004344:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004346:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004348:	2207      	movs	r2, #7
 800434a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800434c:	e009      	b.n	8004362 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004356:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d0ef      	beq.n	800434e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1c3 0307 	rsb	r3, r3, #7
 8004376:	2b04      	cmp	r3, #4
 8004378:	d00a      	beq.n	8004390 <xPortStartScheduler+0x78>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60bb      	str	r3, [r7, #8]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004390:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004398:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <xPortStartScheduler+0xd8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043a2:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <xPortStartScheduler+0xd8>)
 80043a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <xPortStartScheduler+0xdc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <xPortStartScheduler+0xdc>)
 80043b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <xPortStartScheduler+0xdc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <xPortStartScheduler+0xdc>)
 80043c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043c6:	f000 f8b9 	bl	800453c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <xPortStartScheduler+0xe0>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043d0:	f7ff ff92 	bl	80042f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043d4:	f7ff faa0 	bl	8003918 <vTaskSwitchContext>
	prvTaskExitError();
 80043d8:	f7ff ff4c 	bl	8004274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000e400 	.word	0xe000e400
 80043ec:	2000044c 	.word	0x2000044c
 80043f0:	20000450 	.word	0x20000450
 80043f4:	e000ed20 	.word	0xe000ed20
 80043f8:	2000003c 	.word	0x2000003c

080043fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
}
 8004414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <vPortEnterCritical+0x58>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	4a0d      	ldr	r2, [pc, #52]	; (8004454 <vPortEnterCritical+0x58>)
 800441e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <vPortEnterCritical+0x58>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d10f      	bne.n	8004448 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <vPortEnterCritical+0x5c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <vPortEnterCritical+0x4c>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	603b      	str	r3, [r7, #0]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <vPortEnterCritical+0x4a>
	}
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	2000003c 	.word	0x2000003c
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <vPortExitCritical+0x4c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <vPortExitCritical+0x24>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	607b      	str	r3, [r7, #4]
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <vPortExitCritical+0x4c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3b01      	subs	r3, #1
 8004486:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <vPortExitCritical+0x4c>)
 8004488:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <vPortExitCritical+0x4c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <vPortExitCritical+0x42>
 8004492:	2300      	movs	r3, #0
 8004494:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800449c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	2000003c 	.word	0x2000003c
 80044ac:	00000000 	.word	0x00000000

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044c0:	6010      	str	r0, [r2, #0]
 80044c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044ca:	f380 8811 	msr	BASEPRI, r0
 80044ce:	f7ff fa23 	bl	8003918 <vTaskSwitchContext>
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6808      	ldr	r0, [r1, #0]
 80044e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044e6:	f380 8809 	msr	PSP, r0
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	4770      	bx	lr

080044f0 <pxCurrentTCBConst>:
 80044f0:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
}
 8004510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004512:	f7ff f943 	bl	800379c <xTaskIncrementTick>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <SysTick_Handler+0x40>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f383 8811 	msr	BASEPRI, r3
}
 800452e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <vPortSetupTimerInterrupt+0x30>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <vPortSetupTimerInterrupt+0x34>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <vPortSetupTimerInterrupt+0x38>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <vPortSetupTimerInterrupt+0x3c>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <vPortSetupTimerInterrupt+0x40>)
 800455a:	3b01      	subs	r3, #1
 800455c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800455e:	4b03      	ldr	r3, [pc, #12]	; (800456c <vPortSetupTimerInterrupt+0x30>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	e000e010 	.word	0xe000e010
 8004570:	e000e018 	.word	0xe000e018
 8004574:	20000030 	.word	0x20000030
 8004578:	10624dd3 	.word	0x10624dd3
 800457c:	e000e014 	.word	0xe000e014

08004580 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800458c:	f7ff f85c 	bl	8003648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004590:	4b58      	ldr	r3, [pc, #352]	; (80046f4 <pvPortMalloc+0x174>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004598:	f000 f910 	bl	80047bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800459c:	4b56      	ldr	r3, [pc, #344]	; (80046f8 <pvPortMalloc+0x178>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f040 808e 	bne.w	80046c6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01d      	beq.n	80045ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045b0:	2208      	movs	r2, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d014      	beq.n	80045ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f023 0307 	bic.w	r3, r3, #7
 80045c8:	3308      	adds	r3, #8
 80045ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <pvPortMalloc+0x6c>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	617b      	str	r3, [r7, #20]
}
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d069      	beq.n	80046c6 <pvPortMalloc+0x146>
 80045f2:	4b42      	ldr	r3, [pc, #264]	; (80046fc <pvPortMalloc+0x17c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d864      	bhi.n	80046c6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045fc:	4b40      	ldr	r3, [pc, #256]	; (8004700 <pvPortMalloc+0x180>)
 80045fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004600:	4b3f      	ldr	r3, [pc, #252]	; (8004700 <pvPortMalloc+0x180>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004606:	e004      	b.n	8004612 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	d903      	bls.n	8004624 <pvPortMalloc+0xa4>
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f1      	bne.n	8004608 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004624:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <pvPortMalloc+0x174>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	429a      	cmp	r2, r3
 800462c:	d04b      	beq.n	80046c6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2208      	movs	r2, #8
 8004634:	4413      	add	r3, r2
 8004636:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	2308      	movs	r3, #8
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	429a      	cmp	r2, r3
 800464e:	d91f      	bls.n	8004690 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <pvPortMalloc+0xf8>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	613b      	str	r3, [r7, #16]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad2      	subs	r2, r2, r3
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800468a:	69b8      	ldr	r0, [r7, #24]
 800468c:	f000 f8f8 	bl	8004880 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004690:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <pvPortMalloc+0x17c>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <pvPortMalloc+0x17c>)
 800469c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800469e:	4b17      	ldr	r3, [pc, #92]	; (80046fc <pvPortMalloc+0x17c>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b18      	ldr	r3, [pc, #96]	; (8004704 <pvPortMalloc+0x184>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d203      	bcs.n	80046b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <pvPortMalloc+0x17c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <pvPortMalloc+0x184>)
 80046b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <pvPortMalloc+0x178>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046c6:	f7fe ffcd 	bl	8003664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <pvPortMalloc+0x16a>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	60fb      	str	r3, [r7, #12]
}
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <pvPortMalloc+0x168>
	return pvReturn;
 80046ea:	69fb      	ldr	r3, [r7, #28]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	; 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2000105c 	.word	0x2000105c
 80046f8:	20001068 	.word	0x20001068
 80046fc:	20001060 	.word	0x20001060
 8004700:	20001054 	.word	0x20001054
 8004704:	20001064 	.word	0x20001064

08004708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d048      	beq.n	80047ac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800471a:	2308      	movs	r3, #8
 800471c:	425b      	negs	r3, r3
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4413      	add	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <vPortFree+0xac>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <vPortFree+0x44>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60fb      	str	r3, [r7, #12]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <vPortFree+0x62>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	60bb      	str	r3, [r7, #8]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <vPortFree+0xac>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d019      	beq.n	80047ac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d115      	bne.n	80047ac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <vPortFree+0xac>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	43db      	mvns	r3, r3
 800478a:	401a      	ands	r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004790:	f7fe ff5a 	bl	8003648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <vPortFree+0xb0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4413      	add	r3, r2
 800479e:	4a06      	ldr	r2, [pc, #24]	; (80047b8 <vPortFree+0xb0>)
 80047a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047a2:	6938      	ldr	r0, [r7, #16]
 80047a4:	f000 f86c 	bl	8004880 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80047a8:	f7fe ff5c 	bl	8003664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047ac:	bf00      	nop
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20001068 	.word	0x20001068
 80047b8:	20001060 	.word	0x20001060

080047bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047c8:	4b27      	ldr	r3, [pc, #156]	; (8004868 <prvHeapInit+0xac>)
 80047ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3307      	adds	r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0307 	bic.w	r3, r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <prvHeapInit+0xac>)
 80047ec:	4413      	add	r3, r2
 80047ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047f4:	4a1d      	ldr	r2, [pc, #116]	; (800486c <prvHeapInit+0xb0>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047fa:	4b1c      	ldr	r3, [pc, #112]	; (800486c <prvHeapInit+0xb0>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4413      	add	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004808:	2208      	movs	r2, #8
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0307 	bic.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a15      	ldr	r2, [pc, #84]	; (8004870 <prvHeapInit+0xb4>)
 800481c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <prvHeapInit+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <prvHeapInit+0xb4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <prvHeapInit+0xb4>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a0a      	ldr	r2, [pc, #40]	; (8004874 <prvHeapInit+0xb8>)
 800484a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a09      	ldr	r2, [pc, #36]	; (8004878 <prvHeapInit+0xbc>)
 8004852:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <prvHeapInit+0xc0>)
 8004856:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800485a:	601a      	str	r2, [r3, #0]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000454 	.word	0x20000454
 800486c:	20001054 	.word	0x20001054
 8004870:	2000105c 	.word	0x2000105c
 8004874:	20001064 	.word	0x20001064
 8004878:	20001060 	.word	0x20001060
 800487c:	20001068 	.word	0x20001068

08004880 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004888:	4b27      	ldr	r3, [pc, #156]	; (8004928 <prvInsertBlockIntoFreeList+0xa8>)
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e002      	b.n	8004894 <prvInsertBlockIntoFreeList+0x14>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	429a      	cmp	r2, r3
 800489c:	d8f7      	bhi.n	800488e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4413      	add	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d108      	bne.n	80048c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	441a      	add	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	441a      	add	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d118      	bne.n	8004908 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b14      	ldr	r3, [pc, #80]	; (800492c <prvInsertBlockIntoFreeList+0xac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d00d      	beq.n	80048fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e008      	b.n	8004910 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <prvInsertBlockIntoFreeList+0xac>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e003      	b.n	8004910 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d002      	beq.n	800491e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	20001054 	.word	0x20001054
 800492c:	2000105c 	.word	0x2000105c

08004930 <atoi>:
 8004930:	220a      	movs	r2, #10
 8004932:	2100      	movs	r1, #0
 8004934:	f000 b9b8 	b.w	8004ca8 <strtol>

08004938 <__errno>:
 8004938:	4b01      	ldr	r3, [pc, #4]	; (8004940 <__errno+0x8>)
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000040 	.word	0x20000040

08004944 <__libc_init_array>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	2600      	movs	r6, #0
 8004948:	4d0c      	ldr	r5, [pc, #48]	; (800497c <__libc_init_array+0x38>)
 800494a:	4c0d      	ldr	r4, [pc, #52]	; (8004980 <__libc_init_array+0x3c>)
 800494c:	1b64      	subs	r4, r4, r5
 800494e:	10a4      	asrs	r4, r4, #2
 8004950:	42a6      	cmp	r6, r4
 8004952:	d109      	bne.n	8004968 <__libc_init_array+0x24>
 8004954:	f001 f97e 	bl	8005c54 <_init>
 8004958:	2600      	movs	r6, #0
 800495a:	4d0a      	ldr	r5, [pc, #40]	; (8004984 <__libc_init_array+0x40>)
 800495c:	4c0a      	ldr	r4, [pc, #40]	; (8004988 <__libc_init_array+0x44>)
 800495e:	1b64      	subs	r4, r4, r5
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	42a6      	cmp	r6, r4
 8004964:	d105      	bne.n	8004972 <__libc_init_array+0x2e>
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	f855 3b04 	ldr.w	r3, [r5], #4
 800496c:	4798      	blx	r3
 800496e:	3601      	adds	r6, #1
 8004970:	e7ee      	b.n	8004950 <__libc_init_array+0xc>
 8004972:	f855 3b04 	ldr.w	r3, [r5], #4
 8004976:	4798      	blx	r3
 8004978:	3601      	adds	r6, #1
 800497a:	e7f2      	b.n	8004962 <__libc_init_array+0x1e>
 800497c:	08005f84 	.word	0x08005f84
 8004980:	08005f84 	.word	0x08005f84
 8004984:	08005f84 	.word	0x08005f84
 8004988:	08005f88 	.word	0x08005f88

0800498c <memcpy>:
 800498c:	440a      	add	r2, r1
 800498e:	4291      	cmp	r1, r2
 8004990:	f100 33ff 	add.w	r3, r0, #4294967295
 8004994:	d100      	bne.n	8004998 <memcpy+0xc>
 8004996:	4770      	bx	lr
 8004998:	b510      	push	{r4, lr}
 800499a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499e:	4291      	cmp	r1, r2
 80049a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a4:	d1f9      	bne.n	800499a <memcpy+0xe>
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <memset>:
 80049a8:	4603      	mov	r3, r0
 80049aa:	4402      	add	r2, r0
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d100      	bne.n	80049b2 <memset+0xa>
 80049b0:	4770      	bx	lr
 80049b2:	f803 1b01 	strb.w	r1, [r3], #1
 80049b6:	e7f9      	b.n	80049ac <memset+0x4>

080049b8 <iprintf>:
 80049b8:	b40f      	push	{r0, r1, r2, r3}
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <iprintf+0x2c>)
 80049bc:	b513      	push	{r0, r1, r4, lr}
 80049be:	681c      	ldr	r4, [r3, #0]
 80049c0:	b124      	cbz	r4, 80049cc <iprintf+0x14>
 80049c2:	69a3      	ldr	r3, [r4, #24]
 80049c4:	b913      	cbnz	r3, 80049cc <iprintf+0x14>
 80049c6:	4620      	mov	r0, r4
 80049c8:	f000 fb70 	bl	80050ac <__sinit>
 80049cc:	ab05      	add	r3, sp, #20
 80049ce:	4620      	mov	r0, r4
 80049d0:	9a04      	ldr	r2, [sp, #16]
 80049d2:	68a1      	ldr	r1, [r4, #8]
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	f000 fd55 	bl	8005484 <_vfiprintf_r>
 80049da:	b002      	add	sp, #8
 80049dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e0:	b004      	add	sp, #16
 80049e2:	4770      	bx	lr
 80049e4:	20000040 	.word	0x20000040

080049e8 <_puts_r>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	460e      	mov	r6, r1
 80049ec:	4605      	mov	r5, r0
 80049ee:	b118      	cbz	r0, 80049f8 <_puts_r+0x10>
 80049f0:	6983      	ldr	r3, [r0, #24]
 80049f2:	b90b      	cbnz	r3, 80049f8 <_puts_r+0x10>
 80049f4:	f000 fb5a 	bl	80050ac <__sinit>
 80049f8:	69ab      	ldr	r3, [r5, #24]
 80049fa:	68ac      	ldr	r4, [r5, #8]
 80049fc:	b913      	cbnz	r3, 8004a04 <_puts_r+0x1c>
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 fb54 	bl	80050ac <__sinit>
 8004a04:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <_puts_r+0xd0>)
 8004a06:	429c      	cmp	r4, r3
 8004a08:	d120      	bne.n	8004a4c <_puts_r+0x64>
 8004a0a:	686c      	ldr	r4, [r5, #4]
 8004a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a0e:	07db      	lsls	r3, r3, #31
 8004a10:	d405      	bmi.n	8004a1e <_puts_r+0x36>
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	0598      	lsls	r0, r3, #22
 8004a16:	d402      	bmi.n	8004a1e <_puts_r+0x36>
 8004a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a1a:	f000 fbf7 	bl	800520c <__retarget_lock_acquire_recursive>
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	0719      	lsls	r1, r3, #28
 8004a22:	d51d      	bpl.n	8004a60 <_puts_r+0x78>
 8004a24:	6923      	ldr	r3, [r4, #16]
 8004a26:	b1db      	cbz	r3, 8004a60 <_puts_r+0x78>
 8004a28:	3e01      	subs	r6, #1
 8004a2a:	68a3      	ldr	r3, [r4, #8]
 8004a2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60a3      	str	r3, [r4, #8]
 8004a34:	bb39      	cbnz	r1, 8004a86 <_puts_r+0x9e>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da38      	bge.n	8004aac <_puts_r+0xc4>
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	210a      	movs	r1, #10
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 f93c 	bl	8004cbc <__swbuf_r>
 8004a44:	3001      	adds	r0, #1
 8004a46:	d011      	beq.n	8004a6c <_puts_r+0x84>
 8004a48:	250a      	movs	r5, #10
 8004a4a:	e011      	b.n	8004a70 <_puts_r+0x88>
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <_puts_r+0xd4>)
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	d101      	bne.n	8004a56 <_puts_r+0x6e>
 8004a52:	68ac      	ldr	r4, [r5, #8]
 8004a54:	e7da      	b.n	8004a0c <_puts_r+0x24>
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <_puts_r+0xd8>)
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	bf08      	it	eq
 8004a5c:	68ec      	ldreq	r4, [r5, #12]
 8004a5e:	e7d5      	b.n	8004a0c <_puts_r+0x24>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f97c 	bl	8004d60 <__swsetup_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d0dd      	beq.n	8004a28 <_puts_r+0x40>
 8004a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a72:	07da      	lsls	r2, r3, #31
 8004a74:	d405      	bmi.n	8004a82 <_puts_r+0x9a>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	059b      	lsls	r3, r3, #22
 8004a7a:	d402      	bmi.n	8004a82 <_puts_r+0x9a>
 8004a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7e:	f000 fbc6 	bl	800520e <__retarget_lock_release_recursive>
 8004a82:	4628      	mov	r0, r5
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	da04      	bge.n	8004a94 <_puts_r+0xac>
 8004a8a:	69a2      	ldr	r2, [r4, #24]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	dc06      	bgt.n	8004a9e <_puts_r+0xb6>
 8004a90:	290a      	cmp	r1, #10
 8004a92:	d004      	beq.n	8004a9e <_puts_r+0xb6>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	6022      	str	r2, [r4, #0]
 8004a9a:	7019      	strb	r1, [r3, #0]
 8004a9c:	e7c5      	b.n	8004a2a <_puts_r+0x42>
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 f90b 	bl	8004cbc <__swbuf_r>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d1bf      	bne.n	8004a2a <_puts_r+0x42>
 8004aaa:	e7df      	b.n	8004a6c <_puts_r+0x84>
 8004aac:	250a      	movs	r5, #10
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	6022      	str	r2, [r4, #0]
 8004ab4:	701d      	strb	r5, [r3, #0]
 8004ab6:	e7db      	b.n	8004a70 <_puts_r+0x88>
 8004ab8:	08005f10 	.word	0x08005f10
 8004abc:	08005f30 	.word	0x08005f30
 8004ac0:	08005ef0 	.word	0x08005ef0

08004ac4 <puts>:
 8004ac4:	4b02      	ldr	r3, [pc, #8]	; (8004ad0 <puts+0xc>)
 8004ac6:	4601      	mov	r1, r0
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	f7ff bf8d 	b.w	80049e8 <_puts_r>
 8004ace:	bf00      	nop
 8004ad0:	20000040 	.word	0x20000040

08004ad4 <strcpy>:
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ada:	f803 2b01 	strb.w	r2, [r3], #1
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	d1f9      	bne.n	8004ad6 <strcpy+0x2>
 8004ae2:	4770      	bx	lr

08004ae4 <strtok>:
 8004ae4:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <strtok+0x5c>)
 8004ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aea:	681f      	ldr	r7, [r3, #0]
 8004aec:	4605      	mov	r5, r0
 8004aee:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004af0:	460e      	mov	r6, r1
 8004af2:	b9ec      	cbnz	r4, 8004b30 <strtok+0x4c>
 8004af4:	2050      	movs	r0, #80	; 0x50
 8004af6:	f000 fbef 	bl	80052d8 <malloc>
 8004afa:	4602      	mov	r2, r0
 8004afc:	65b8      	str	r0, [r7, #88]	; 0x58
 8004afe:	b920      	cbnz	r0, 8004b0a <strtok+0x26>
 8004b00:	2157      	movs	r1, #87	; 0x57
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <strtok+0x60>)
 8004b04:	4810      	ldr	r0, [pc, #64]	; (8004b48 <strtok+0x64>)
 8004b06:	f000 f999 	bl	8004e3c <__assert_func>
 8004b0a:	e9c0 4400 	strd	r4, r4, [r0]
 8004b0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004b12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004b16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004b1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004b1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004b22:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004b26:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004b2a:	6184      	str	r4, [r0, #24]
 8004b2c:	7704      	strb	r4, [r0, #28]
 8004b2e:	6244      	str	r4, [r0, #36]	; 0x24
 8004b30:	4631      	mov	r1, r6
 8004b32:	4628      	mov	r0, r5
 8004b34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b36:	2301      	movs	r3, #1
 8004b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3c:	f000 b806 	b.w	8004b4c <__strtok_r>
 8004b40:	20000040 	.word	0x20000040
 8004b44:	08005d38 	.word	0x08005d38
 8004b48:	08005d4f 	.word	0x08005d4f

08004b4c <__strtok_r>:
 8004b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4e:	b908      	cbnz	r0, 8004b54 <__strtok_r+0x8>
 8004b50:	6810      	ldr	r0, [r2, #0]
 8004b52:	b188      	cbz	r0, 8004b78 <__strtok_r+0x2c>
 8004b54:	4604      	mov	r4, r0
 8004b56:	460f      	mov	r7, r1
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b62:	b91e      	cbnz	r6, 8004b6c <__strtok_r+0x20>
 8004b64:	b965      	cbnz	r5, 8004b80 <__strtok_r+0x34>
 8004b66:	4628      	mov	r0, r5
 8004b68:	6015      	str	r5, [r2, #0]
 8004b6a:	e005      	b.n	8004b78 <__strtok_r+0x2c>
 8004b6c:	42b5      	cmp	r5, r6
 8004b6e:	d1f6      	bne.n	8004b5e <__strtok_r+0x12>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f0      	bne.n	8004b56 <__strtok_r+0xa>
 8004b74:	6014      	str	r4, [r2, #0]
 8004b76:	7003      	strb	r3, [r0, #0]
 8004b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7a:	461c      	mov	r4, r3
 8004b7c:	e00c      	b.n	8004b98 <__strtok_r+0x4c>
 8004b7e:	b915      	cbnz	r5, 8004b86 <__strtok_r+0x3a>
 8004b80:	460e      	mov	r6, r1
 8004b82:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b86:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004b8a:	42ab      	cmp	r3, r5
 8004b8c:	d1f7      	bne.n	8004b7e <__strtok_r+0x32>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f3      	beq.n	8004b7a <__strtok_r+0x2e>
 8004b92:	2300      	movs	r3, #0
 8004b94:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004b98:	6014      	str	r4, [r2, #0]
 8004b9a:	e7ed      	b.n	8004b78 <__strtok_r+0x2c>

08004b9c <_strtol_l.isra.0>:
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba2:	4686      	mov	lr, r0
 8004ba4:	d001      	beq.n	8004baa <_strtol_l.isra.0+0xe>
 8004ba6:	2b24      	cmp	r3, #36	; 0x24
 8004ba8:	d906      	bls.n	8004bb8 <_strtol_l.isra.0+0x1c>
 8004baa:	f7ff fec5 	bl	8004938 <__errno>
 8004bae:	2316      	movs	r3, #22
 8004bb0:	6003      	str	r3, [r0, #0]
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	468c      	mov	ip, r1
 8004bba:	4e3a      	ldr	r6, [pc, #232]	; (8004ca4 <_strtol_l.isra.0+0x108>)
 8004bbc:	4660      	mov	r0, ip
 8004bbe:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004bc2:	5da5      	ldrb	r5, [r4, r6]
 8004bc4:	f015 0508 	ands.w	r5, r5, #8
 8004bc8:	d1f8      	bne.n	8004bbc <_strtol_l.isra.0+0x20>
 8004bca:	2c2d      	cmp	r4, #45	; 0x2d
 8004bcc:	d133      	bne.n	8004c36 <_strtol_l.isra.0+0x9a>
 8004bce:	f04f 0801 	mov.w	r8, #1
 8004bd2:	f89c 4000 	ldrb.w	r4, [ip]
 8004bd6:	f100 0c02 	add.w	ip, r0, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d05d      	beq.n	8004c9a <_strtol_l.isra.0+0xfe>
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d10c      	bne.n	8004bfc <_strtol_l.isra.0+0x60>
 8004be2:	2c30      	cmp	r4, #48	; 0x30
 8004be4:	d10a      	bne.n	8004bfc <_strtol_l.isra.0+0x60>
 8004be6:	f89c 0000 	ldrb.w	r0, [ip]
 8004bea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004bee:	2858      	cmp	r0, #88	; 0x58
 8004bf0:	d14e      	bne.n	8004c90 <_strtol_l.isra.0+0xf4>
 8004bf2:	2310      	movs	r3, #16
 8004bf4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004bf8:	f10c 0c02 	add.w	ip, ip, #2
 8004bfc:	2500      	movs	r5, #0
 8004bfe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004c02:	3f01      	subs	r7, #1
 8004c04:	fbb7 f9f3 	udiv	r9, r7, r3
 8004c08:	4628      	mov	r0, r5
 8004c0a:	fb03 7a19 	mls	sl, r3, r9, r7
 8004c0e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004c12:	2e09      	cmp	r6, #9
 8004c14:	d818      	bhi.n	8004c48 <_strtol_l.isra.0+0xac>
 8004c16:	4634      	mov	r4, r6
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	dd24      	ble.n	8004c66 <_strtol_l.isra.0+0xca>
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	db1f      	blt.n	8004c60 <_strtol_l.isra.0+0xc4>
 8004c20:	4581      	cmp	r9, r0
 8004c22:	d31d      	bcc.n	8004c60 <_strtol_l.isra.0+0xc4>
 8004c24:	d101      	bne.n	8004c2a <_strtol_l.isra.0+0x8e>
 8004c26:	45a2      	cmp	sl, r4
 8004c28:	db1a      	blt.n	8004c60 <_strtol_l.isra.0+0xc4>
 8004c2a:	2501      	movs	r5, #1
 8004c2c:	fb00 4003 	mla	r0, r0, r3, r4
 8004c30:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004c34:	e7eb      	b.n	8004c0e <_strtol_l.isra.0+0x72>
 8004c36:	2c2b      	cmp	r4, #43	; 0x2b
 8004c38:	bf08      	it	eq
 8004c3a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004c3e:	46a8      	mov	r8, r5
 8004c40:	bf08      	it	eq
 8004c42:	f100 0c02 	addeq.w	ip, r0, #2
 8004c46:	e7c8      	b.n	8004bda <_strtol_l.isra.0+0x3e>
 8004c48:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004c4c:	2e19      	cmp	r6, #25
 8004c4e:	d801      	bhi.n	8004c54 <_strtol_l.isra.0+0xb8>
 8004c50:	3c37      	subs	r4, #55	; 0x37
 8004c52:	e7e1      	b.n	8004c18 <_strtol_l.isra.0+0x7c>
 8004c54:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004c58:	2e19      	cmp	r6, #25
 8004c5a:	d804      	bhi.n	8004c66 <_strtol_l.isra.0+0xca>
 8004c5c:	3c57      	subs	r4, #87	; 0x57
 8004c5e:	e7db      	b.n	8004c18 <_strtol_l.isra.0+0x7c>
 8004c60:	f04f 35ff 	mov.w	r5, #4294967295
 8004c64:	e7e4      	b.n	8004c30 <_strtol_l.isra.0+0x94>
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	da08      	bge.n	8004c7c <_strtol_l.isra.0+0xe0>
 8004c6a:	2322      	movs	r3, #34	; 0x22
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	f8ce 3000 	str.w	r3, [lr]
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d09e      	beq.n	8004bb4 <_strtol_l.isra.0+0x18>
 8004c76:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004c7a:	e007      	b.n	8004c8c <_strtol_l.isra.0+0xf0>
 8004c7c:	f1b8 0f00 	cmp.w	r8, #0
 8004c80:	d000      	beq.n	8004c84 <_strtol_l.isra.0+0xe8>
 8004c82:	4240      	negs	r0, r0
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	d095      	beq.n	8004bb4 <_strtol_l.isra.0+0x18>
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	d1f4      	bne.n	8004c76 <_strtol_l.isra.0+0xda>
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	e791      	b.n	8004bb4 <_strtol_l.isra.0+0x18>
 8004c90:	2430      	movs	r4, #48	; 0x30
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1b2      	bne.n	8004bfc <_strtol_l.isra.0+0x60>
 8004c96:	2308      	movs	r3, #8
 8004c98:	e7b0      	b.n	8004bfc <_strtol_l.isra.0+0x60>
 8004c9a:	2c30      	cmp	r4, #48	; 0x30
 8004c9c:	d0a3      	beq.n	8004be6 <_strtol_l.isra.0+0x4a>
 8004c9e:	230a      	movs	r3, #10
 8004ca0:	e7ac      	b.n	8004bfc <_strtol_l.isra.0+0x60>
 8004ca2:	bf00      	nop
 8004ca4:	08005ded 	.word	0x08005ded

08004ca8 <strtol>:
 8004ca8:	4613      	mov	r3, r2
 8004caa:	460a      	mov	r2, r1
 8004cac:	4601      	mov	r1, r0
 8004cae:	4802      	ldr	r0, [pc, #8]	; (8004cb8 <strtol+0x10>)
 8004cb0:	6800      	ldr	r0, [r0, #0]
 8004cb2:	f7ff bf73 	b.w	8004b9c <_strtol_l.isra.0>
 8004cb6:	bf00      	nop
 8004cb8:	20000040 	.word	0x20000040

08004cbc <__swbuf_r>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	460e      	mov	r6, r1
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	b118      	cbz	r0, 8004cce <__swbuf_r+0x12>
 8004cc6:	6983      	ldr	r3, [r0, #24]
 8004cc8:	b90b      	cbnz	r3, 8004cce <__swbuf_r+0x12>
 8004cca:	f000 f9ef 	bl	80050ac <__sinit>
 8004cce:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <__swbuf_r+0x98>)
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	d12b      	bne.n	8004d2c <__swbuf_r+0x70>
 8004cd4:	686c      	ldr	r4, [r5, #4]
 8004cd6:	69a3      	ldr	r3, [r4, #24]
 8004cd8:	60a3      	str	r3, [r4, #8]
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	071a      	lsls	r2, r3, #28
 8004cde:	d52f      	bpl.n	8004d40 <__swbuf_r+0x84>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	b36b      	cbz	r3, 8004d40 <__swbuf_r+0x84>
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	b2f6      	uxtb	r6, r6
 8004cea:	1ac0      	subs	r0, r0, r3
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	4637      	mov	r7, r6
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	dc04      	bgt.n	8004cfe <__swbuf_r+0x42>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f000 f944 	bl	8004f84 <_fflush_r>
 8004cfc:	bb30      	cbnz	r0, 8004d4c <__swbuf_r+0x90>
 8004cfe:	68a3      	ldr	r3, [r4, #8]
 8004d00:	3001      	adds	r0, #1
 8004d02:	3b01      	subs	r3, #1
 8004d04:	60a3      	str	r3, [r4, #8]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	701e      	strb	r6, [r3, #0]
 8004d0e:	6963      	ldr	r3, [r4, #20]
 8004d10:	4283      	cmp	r3, r0
 8004d12:	d004      	beq.n	8004d1e <__swbuf_r+0x62>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	07db      	lsls	r3, r3, #31
 8004d18:	d506      	bpl.n	8004d28 <__swbuf_r+0x6c>
 8004d1a:	2e0a      	cmp	r6, #10
 8004d1c:	d104      	bne.n	8004d28 <__swbuf_r+0x6c>
 8004d1e:	4621      	mov	r1, r4
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 f92f 	bl	8004f84 <_fflush_r>
 8004d26:	b988      	cbnz	r0, 8004d4c <__swbuf_r+0x90>
 8004d28:	4638      	mov	r0, r7
 8004d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <__swbuf_r+0x9c>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d101      	bne.n	8004d36 <__swbuf_r+0x7a>
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	e7cf      	b.n	8004cd6 <__swbuf_r+0x1a>
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <__swbuf_r+0xa0>)
 8004d38:	429c      	cmp	r4, r3
 8004d3a:	bf08      	it	eq
 8004d3c:	68ec      	ldreq	r4, [r5, #12]
 8004d3e:	e7ca      	b.n	8004cd6 <__swbuf_r+0x1a>
 8004d40:	4621      	mov	r1, r4
 8004d42:	4628      	mov	r0, r5
 8004d44:	f000 f80c 	bl	8004d60 <__swsetup_r>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d0cb      	beq.n	8004ce4 <__swbuf_r+0x28>
 8004d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d50:	e7ea      	b.n	8004d28 <__swbuf_r+0x6c>
 8004d52:	bf00      	nop
 8004d54:	08005f10 	.word	0x08005f10
 8004d58:	08005f30 	.word	0x08005f30
 8004d5c:	08005ef0 	.word	0x08005ef0

08004d60 <__swsetup_r>:
 8004d60:	4b32      	ldr	r3, [pc, #200]	; (8004e2c <__swsetup_r+0xcc>)
 8004d62:	b570      	push	{r4, r5, r6, lr}
 8004d64:	681d      	ldr	r5, [r3, #0]
 8004d66:	4606      	mov	r6, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	b125      	cbz	r5, 8004d76 <__swsetup_r+0x16>
 8004d6c:	69ab      	ldr	r3, [r5, #24]
 8004d6e:	b913      	cbnz	r3, 8004d76 <__swsetup_r+0x16>
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 f99b 	bl	80050ac <__sinit>
 8004d76:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <__swsetup_r+0xd0>)
 8004d78:	429c      	cmp	r4, r3
 8004d7a:	d10f      	bne.n	8004d9c <__swsetup_r+0x3c>
 8004d7c:	686c      	ldr	r4, [r5, #4]
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d84:	0719      	lsls	r1, r3, #28
 8004d86:	d42c      	bmi.n	8004de2 <__swsetup_r+0x82>
 8004d88:	06dd      	lsls	r5, r3, #27
 8004d8a:	d411      	bmi.n	8004db0 <__swsetup_r+0x50>
 8004d8c:	2309      	movs	r3, #9
 8004d8e:	6033      	str	r3, [r6, #0]
 8004d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	e03e      	b.n	8004e1a <__swsetup_r+0xba>
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <__swsetup_r+0xd4>)
 8004d9e:	429c      	cmp	r4, r3
 8004da0:	d101      	bne.n	8004da6 <__swsetup_r+0x46>
 8004da2:	68ac      	ldr	r4, [r5, #8]
 8004da4:	e7eb      	b.n	8004d7e <__swsetup_r+0x1e>
 8004da6:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <__swsetup_r+0xd8>)
 8004da8:	429c      	cmp	r4, r3
 8004daa:	bf08      	it	eq
 8004dac:	68ec      	ldreq	r4, [r5, #12]
 8004dae:	e7e6      	b.n	8004d7e <__swsetup_r+0x1e>
 8004db0:	0758      	lsls	r0, r3, #29
 8004db2:	d512      	bpl.n	8004dda <__swsetup_r+0x7a>
 8004db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004db6:	b141      	cbz	r1, 8004dca <__swsetup_r+0x6a>
 8004db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dbc:	4299      	cmp	r1, r3
 8004dbe:	d002      	beq.n	8004dc6 <__swsetup_r+0x66>
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 fa91 	bl	80052e8 <_free_r>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6063      	str	r3, [r4, #4]
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f043 0308 	orr.w	r3, r3, #8
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	b94b      	cbnz	r3, 8004dfa <__swsetup_r+0x9a>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df0:	d003      	beq.n	8004dfa <__swsetup_r+0x9a>
 8004df2:	4621      	mov	r1, r4
 8004df4:	4630      	mov	r0, r6
 8004df6:	f000 fa2f 	bl	8005258 <__smakebuf_r>
 8004dfa:	89a0      	ldrh	r0, [r4, #12]
 8004dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e00:	f010 0301 	ands.w	r3, r0, #1
 8004e04:	d00a      	beq.n	8004e1c <__swsetup_r+0xbc>
 8004e06:	2300      	movs	r3, #0
 8004e08:	60a3      	str	r3, [r4, #8]
 8004e0a:	6963      	ldr	r3, [r4, #20]
 8004e0c:	425b      	negs	r3, r3
 8004e0e:	61a3      	str	r3, [r4, #24]
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	b943      	cbnz	r3, 8004e26 <__swsetup_r+0xc6>
 8004e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e18:	d1ba      	bne.n	8004d90 <__swsetup_r+0x30>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	0781      	lsls	r1, r0, #30
 8004e1e:	bf58      	it	pl
 8004e20:	6963      	ldrpl	r3, [r4, #20]
 8004e22:	60a3      	str	r3, [r4, #8]
 8004e24:	e7f4      	b.n	8004e10 <__swsetup_r+0xb0>
 8004e26:	2000      	movs	r0, #0
 8004e28:	e7f7      	b.n	8004e1a <__swsetup_r+0xba>
 8004e2a:	bf00      	nop
 8004e2c:	20000040 	.word	0x20000040
 8004e30:	08005f10 	.word	0x08005f10
 8004e34:	08005f30 	.word	0x08005f30
 8004e38:	08005ef0 	.word	0x08005ef0

08004e3c <__assert_func>:
 8004e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e3e:	4614      	mov	r4, r2
 8004e40:	461a      	mov	r2, r3
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <__assert_func+0x2c>)
 8004e44:	4605      	mov	r5, r0
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68d8      	ldr	r0, [r3, #12]
 8004e4a:	b14c      	cbz	r4, 8004e60 <__assert_func+0x24>
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <__assert_func+0x30>)
 8004e4e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e52:	9100      	str	r1, [sp, #0]
 8004e54:	462b      	mov	r3, r5
 8004e56:	4906      	ldr	r1, [pc, #24]	; (8004e70 <__assert_func+0x34>)
 8004e58:	f000 f9a6 	bl	80051a8 <fiprintf>
 8004e5c:	f000 fe3e 	bl	8005adc <abort>
 8004e60:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <__assert_func+0x38>)
 8004e62:	461c      	mov	r4, r3
 8004e64:	e7f3      	b.n	8004e4e <__assert_func+0x12>
 8004e66:	bf00      	nop
 8004e68:	20000040 	.word	0x20000040
 8004e6c:	08005db0 	.word	0x08005db0
 8004e70:	08005dbd 	.word	0x08005dbd
 8004e74:	08005deb 	.word	0x08005deb

08004e78 <__sflush_r>:
 8004e78:	898a      	ldrh	r2, [r1, #12]
 8004e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7e:	4605      	mov	r5, r0
 8004e80:	0710      	lsls	r0, r2, #28
 8004e82:	460c      	mov	r4, r1
 8004e84:	d458      	bmi.n	8004f38 <__sflush_r+0xc0>
 8004e86:	684b      	ldr	r3, [r1, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	dc05      	bgt.n	8004e98 <__sflush_r+0x20>
 8004e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	dc02      	bgt.n	8004e98 <__sflush_r+0x20>
 8004e92:	2000      	movs	r0, #0
 8004e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e9a:	2e00      	cmp	r6, #0
 8004e9c:	d0f9      	beq.n	8004e92 <__sflush_r+0x1a>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ea4:	682f      	ldr	r7, [r5, #0]
 8004ea6:	602b      	str	r3, [r5, #0]
 8004ea8:	d032      	beq.n	8004f10 <__sflush_r+0x98>
 8004eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	075a      	lsls	r2, r3, #29
 8004eb0:	d505      	bpl.n	8004ebe <__sflush_r+0x46>
 8004eb2:	6863      	ldr	r3, [r4, #4]
 8004eb4:	1ac0      	subs	r0, r0, r3
 8004eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004eb8:	b10b      	cbz	r3, 8004ebe <__sflush_r+0x46>
 8004eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ebc:	1ac0      	subs	r0, r0, r3
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	6a21      	ldr	r1, [r4, #32]
 8004ec8:	47b0      	blx	r6
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	d106      	bne.n	8004ede <__sflush_r+0x66>
 8004ed0:	6829      	ldr	r1, [r5, #0]
 8004ed2:	291d      	cmp	r1, #29
 8004ed4:	d82c      	bhi.n	8004f30 <__sflush_r+0xb8>
 8004ed6:	4a2a      	ldr	r2, [pc, #168]	; (8004f80 <__sflush_r+0x108>)
 8004ed8:	40ca      	lsrs	r2, r1
 8004eda:	07d6      	lsls	r6, r2, #31
 8004edc:	d528      	bpl.n	8004f30 <__sflush_r+0xb8>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	6062      	str	r2, [r4, #4]
 8004ee2:	6922      	ldr	r2, [r4, #16]
 8004ee4:	04d9      	lsls	r1, r3, #19
 8004ee6:	6022      	str	r2, [r4, #0]
 8004ee8:	d504      	bpl.n	8004ef4 <__sflush_r+0x7c>
 8004eea:	1c42      	adds	r2, r0, #1
 8004eec:	d101      	bne.n	8004ef2 <__sflush_r+0x7a>
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	b903      	cbnz	r3, 8004ef4 <__sflush_r+0x7c>
 8004ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ef6:	602f      	str	r7, [r5, #0]
 8004ef8:	2900      	cmp	r1, #0
 8004efa:	d0ca      	beq.n	8004e92 <__sflush_r+0x1a>
 8004efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f00:	4299      	cmp	r1, r3
 8004f02:	d002      	beq.n	8004f0a <__sflush_r+0x92>
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 f9ef 	bl	80052e8 <_free_r>
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8004f0e:	e7c1      	b.n	8004e94 <__sflush_r+0x1c>
 8004f10:	6a21      	ldr	r1, [r4, #32]
 8004f12:	2301      	movs	r3, #1
 8004f14:	4628      	mov	r0, r5
 8004f16:	47b0      	blx	r6
 8004f18:	1c41      	adds	r1, r0, #1
 8004f1a:	d1c7      	bne.n	8004eac <__sflush_r+0x34>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0c4      	beq.n	8004eac <__sflush_r+0x34>
 8004f22:	2b1d      	cmp	r3, #29
 8004f24:	d001      	beq.n	8004f2a <__sflush_r+0xb2>
 8004f26:	2b16      	cmp	r3, #22
 8004f28:	d101      	bne.n	8004f2e <__sflush_r+0xb6>
 8004f2a:	602f      	str	r7, [r5, #0]
 8004f2c:	e7b1      	b.n	8004e92 <__sflush_r+0x1a>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	e7ad      	b.n	8004e94 <__sflush_r+0x1c>
 8004f38:	690f      	ldr	r7, [r1, #16]
 8004f3a:	2f00      	cmp	r7, #0
 8004f3c:	d0a9      	beq.n	8004e92 <__sflush_r+0x1a>
 8004f3e:	0793      	lsls	r3, r2, #30
 8004f40:	bf18      	it	ne
 8004f42:	2300      	movne	r3, #0
 8004f44:	680e      	ldr	r6, [r1, #0]
 8004f46:	bf08      	it	eq
 8004f48:	694b      	ldreq	r3, [r1, #20]
 8004f4a:	eba6 0807 	sub.w	r8, r6, r7
 8004f4e:	600f      	str	r7, [r1, #0]
 8004f50:	608b      	str	r3, [r1, #8]
 8004f52:	f1b8 0f00 	cmp.w	r8, #0
 8004f56:	dd9c      	ble.n	8004e92 <__sflush_r+0x1a>
 8004f58:	4643      	mov	r3, r8
 8004f5a:	463a      	mov	r2, r7
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	6a21      	ldr	r1, [r4, #32]
 8004f60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f62:	47b0      	blx	r6
 8004f64:	2800      	cmp	r0, #0
 8004f66:	dc06      	bgt.n	8004f76 <__sflush_r+0xfe>
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	e78e      	b.n	8004e94 <__sflush_r+0x1c>
 8004f76:	4407      	add	r7, r0
 8004f78:	eba8 0800 	sub.w	r8, r8, r0
 8004f7c:	e7e9      	b.n	8004f52 <__sflush_r+0xda>
 8004f7e:	bf00      	nop
 8004f80:	20400001 	.word	0x20400001

08004f84 <_fflush_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	690b      	ldr	r3, [r1, #16]
 8004f88:	4605      	mov	r5, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	b913      	cbnz	r3, 8004f94 <_fflush_r+0x10>
 8004f8e:	2500      	movs	r5, #0
 8004f90:	4628      	mov	r0, r5
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	b118      	cbz	r0, 8004f9e <_fflush_r+0x1a>
 8004f96:	6983      	ldr	r3, [r0, #24]
 8004f98:	b90b      	cbnz	r3, 8004f9e <_fflush_r+0x1a>
 8004f9a:	f000 f887 	bl	80050ac <__sinit>
 8004f9e:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <_fflush_r+0x6c>)
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	d11b      	bne.n	8004fdc <_fflush_r+0x58>
 8004fa4:	686c      	ldr	r4, [r5, #4]
 8004fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0ef      	beq.n	8004f8e <_fflush_r+0xa>
 8004fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fb0:	07d0      	lsls	r0, r2, #31
 8004fb2:	d404      	bmi.n	8004fbe <_fflush_r+0x3a>
 8004fb4:	0599      	lsls	r1, r3, #22
 8004fb6:	d402      	bmi.n	8004fbe <_fflush_r+0x3a>
 8004fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fba:	f000 f927 	bl	800520c <__retarget_lock_acquire_recursive>
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	f7ff ff59 	bl	8004e78 <__sflush_r>
 8004fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fc8:	4605      	mov	r5, r0
 8004fca:	07da      	lsls	r2, r3, #31
 8004fcc:	d4e0      	bmi.n	8004f90 <_fflush_r+0xc>
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	059b      	lsls	r3, r3, #22
 8004fd2:	d4dd      	bmi.n	8004f90 <_fflush_r+0xc>
 8004fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fd6:	f000 f91a 	bl	800520e <__retarget_lock_release_recursive>
 8004fda:	e7d9      	b.n	8004f90 <_fflush_r+0xc>
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <_fflush_r+0x70>)
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d101      	bne.n	8004fe6 <_fflush_r+0x62>
 8004fe2:	68ac      	ldr	r4, [r5, #8]
 8004fe4:	e7df      	b.n	8004fa6 <_fflush_r+0x22>
 8004fe6:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <_fflush_r+0x74>)
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	bf08      	it	eq
 8004fec:	68ec      	ldreq	r4, [r5, #12]
 8004fee:	e7da      	b.n	8004fa6 <_fflush_r+0x22>
 8004ff0:	08005f10 	.word	0x08005f10
 8004ff4:	08005f30 	.word	0x08005f30
 8004ff8:	08005ef0 	.word	0x08005ef0

08004ffc <std>:
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	b510      	push	{r4, lr}
 8005000:	4604      	mov	r4, r0
 8005002:	e9c0 3300 	strd	r3, r3, [r0]
 8005006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800500a:	6083      	str	r3, [r0, #8]
 800500c:	8181      	strh	r1, [r0, #12]
 800500e:	6643      	str	r3, [r0, #100]	; 0x64
 8005010:	81c2      	strh	r2, [r0, #14]
 8005012:	6183      	str	r3, [r0, #24]
 8005014:	4619      	mov	r1, r3
 8005016:	2208      	movs	r2, #8
 8005018:	305c      	adds	r0, #92	; 0x5c
 800501a:	f7ff fcc5 	bl	80049a8 <memset>
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <std+0x38>)
 8005020:	6224      	str	r4, [r4, #32]
 8005022:	6263      	str	r3, [r4, #36]	; 0x24
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <std+0x3c>)
 8005026:	62a3      	str	r3, [r4, #40]	; 0x28
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <std+0x40>)
 800502a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <std+0x44>)
 800502e:	6323      	str	r3, [r4, #48]	; 0x30
 8005030:	bd10      	pop	{r4, pc}
 8005032:	bf00      	nop
 8005034:	08005a31 	.word	0x08005a31
 8005038:	08005a53 	.word	0x08005a53
 800503c:	08005a8b 	.word	0x08005a8b
 8005040:	08005aaf 	.word	0x08005aaf

08005044 <_cleanup_r>:
 8005044:	4901      	ldr	r1, [pc, #4]	; (800504c <_cleanup_r+0x8>)
 8005046:	f000 b8c1 	b.w	80051cc <_fwalk_reent>
 800504a:	bf00      	nop
 800504c:	08004f85 	.word	0x08004f85

08005050 <__sfmoreglue>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	2568      	movs	r5, #104	; 0x68
 8005054:	1e4a      	subs	r2, r1, #1
 8005056:	4355      	muls	r5, r2
 8005058:	460e      	mov	r6, r1
 800505a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800505e:	f000 f98f 	bl	8005380 <_malloc_r>
 8005062:	4604      	mov	r4, r0
 8005064:	b140      	cbz	r0, 8005078 <__sfmoreglue+0x28>
 8005066:	2100      	movs	r1, #0
 8005068:	e9c0 1600 	strd	r1, r6, [r0]
 800506c:	300c      	adds	r0, #12
 800506e:	60a0      	str	r0, [r4, #8]
 8005070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005074:	f7ff fc98 	bl	80049a8 <memset>
 8005078:	4620      	mov	r0, r4
 800507a:	bd70      	pop	{r4, r5, r6, pc}

0800507c <__sfp_lock_acquire>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__sfp_lock_acquire+0x8>)
 800507e:	f000 b8c5 	b.w	800520c <__retarget_lock_acquire_recursive>
 8005082:	bf00      	nop
 8005084:	20001160 	.word	0x20001160

08005088 <__sfp_lock_release>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__sfp_lock_release+0x8>)
 800508a:	f000 b8c0 	b.w	800520e <__retarget_lock_release_recursive>
 800508e:	bf00      	nop
 8005090:	20001160 	.word	0x20001160

08005094 <__sinit_lock_acquire>:
 8005094:	4801      	ldr	r0, [pc, #4]	; (800509c <__sinit_lock_acquire+0x8>)
 8005096:	f000 b8b9 	b.w	800520c <__retarget_lock_acquire_recursive>
 800509a:	bf00      	nop
 800509c:	2000115b 	.word	0x2000115b

080050a0 <__sinit_lock_release>:
 80050a0:	4801      	ldr	r0, [pc, #4]	; (80050a8 <__sinit_lock_release+0x8>)
 80050a2:	f000 b8b4 	b.w	800520e <__retarget_lock_release_recursive>
 80050a6:	bf00      	nop
 80050a8:	2000115b 	.word	0x2000115b

080050ac <__sinit>:
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4604      	mov	r4, r0
 80050b0:	f7ff fff0 	bl	8005094 <__sinit_lock_acquire>
 80050b4:	69a3      	ldr	r3, [r4, #24]
 80050b6:	b11b      	cbz	r3, 80050c0 <__sinit+0x14>
 80050b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050bc:	f7ff bff0 	b.w	80050a0 <__sinit_lock_release>
 80050c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050c4:	6523      	str	r3, [r4, #80]	; 0x50
 80050c6:	4b13      	ldr	r3, [pc, #76]	; (8005114 <__sinit+0x68>)
 80050c8:	4a13      	ldr	r2, [pc, #76]	; (8005118 <__sinit+0x6c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	bf08      	it	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	4620      	mov	r0, r4
 80050d6:	bf08      	it	eq
 80050d8:	61a3      	streq	r3, [r4, #24]
 80050da:	f000 f81f 	bl	800511c <__sfp>
 80050de:	6060      	str	r0, [r4, #4]
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 f81b 	bl	800511c <__sfp>
 80050e6:	60a0      	str	r0, [r4, #8]
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 f817 	bl	800511c <__sfp>
 80050ee:	2200      	movs	r2, #0
 80050f0:	2104      	movs	r1, #4
 80050f2:	60e0      	str	r0, [r4, #12]
 80050f4:	6860      	ldr	r0, [r4, #4]
 80050f6:	f7ff ff81 	bl	8004ffc <std>
 80050fa:	2201      	movs	r2, #1
 80050fc:	2109      	movs	r1, #9
 80050fe:	68a0      	ldr	r0, [r4, #8]
 8005100:	f7ff ff7c 	bl	8004ffc <std>
 8005104:	2202      	movs	r2, #2
 8005106:	2112      	movs	r1, #18
 8005108:	68e0      	ldr	r0, [r4, #12]
 800510a:	f7ff ff77 	bl	8004ffc <std>
 800510e:	2301      	movs	r3, #1
 8005110:	61a3      	str	r3, [r4, #24]
 8005112:	e7d1      	b.n	80050b8 <__sinit+0xc>
 8005114:	08005d34 	.word	0x08005d34
 8005118:	08005045 	.word	0x08005045

0800511c <__sfp>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	4607      	mov	r7, r0
 8005120:	f7ff ffac 	bl	800507c <__sfp_lock_acquire>
 8005124:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <__sfp+0x84>)
 8005126:	681e      	ldr	r6, [r3, #0]
 8005128:	69b3      	ldr	r3, [r6, #24]
 800512a:	b913      	cbnz	r3, 8005132 <__sfp+0x16>
 800512c:	4630      	mov	r0, r6
 800512e:	f7ff ffbd 	bl	80050ac <__sinit>
 8005132:	3648      	adds	r6, #72	; 0x48
 8005134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005138:	3b01      	subs	r3, #1
 800513a:	d503      	bpl.n	8005144 <__sfp+0x28>
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	b30b      	cbz	r3, 8005184 <__sfp+0x68>
 8005140:	6836      	ldr	r6, [r6, #0]
 8005142:	e7f7      	b.n	8005134 <__sfp+0x18>
 8005144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005148:	b9d5      	cbnz	r5, 8005180 <__sfp+0x64>
 800514a:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <__sfp+0x88>)
 800514c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005150:	60e3      	str	r3, [r4, #12]
 8005152:	6665      	str	r5, [r4, #100]	; 0x64
 8005154:	f000 f859 	bl	800520a <__retarget_lock_init_recursive>
 8005158:	f7ff ff96 	bl	8005088 <__sfp_lock_release>
 800515c:	2208      	movs	r2, #8
 800515e:	4629      	mov	r1, r5
 8005160:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005164:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005168:	6025      	str	r5, [r4, #0]
 800516a:	61a5      	str	r5, [r4, #24]
 800516c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005170:	f7ff fc1a 	bl	80049a8 <memset>
 8005174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800517c:	4620      	mov	r0, r4
 800517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005180:	3468      	adds	r4, #104	; 0x68
 8005182:	e7d9      	b.n	8005138 <__sfp+0x1c>
 8005184:	2104      	movs	r1, #4
 8005186:	4638      	mov	r0, r7
 8005188:	f7ff ff62 	bl	8005050 <__sfmoreglue>
 800518c:	4604      	mov	r4, r0
 800518e:	6030      	str	r0, [r6, #0]
 8005190:	2800      	cmp	r0, #0
 8005192:	d1d5      	bne.n	8005140 <__sfp+0x24>
 8005194:	f7ff ff78 	bl	8005088 <__sfp_lock_release>
 8005198:	230c      	movs	r3, #12
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	e7ee      	b.n	800517c <__sfp+0x60>
 800519e:	bf00      	nop
 80051a0:	08005d34 	.word	0x08005d34
 80051a4:	ffff0001 	.word	0xffff0001

080051a8 <fiprintf>:
 80051a8:	b40e      	push	{r1, r2, r3}
 80051aa:	b503      	push	{r0, r1, lr}
 80051ac:	4601      	mov	r1, r0
 80051ae:	ab03      	add	r3, sp, #12
 80051b0:	4805      	ldr	r0, [pc, #20]	; (80051c8 <fiprintf+0x20>)
 80051b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051b6:	6800      	ldr	r0, [r0, #0]
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	f000 f963 	bl	8005484 <_vfiprintf_r>
 80051be:	b002      	add	sp, #8
 80051c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c4:	b003      	add	sp, #12
 80051c6:	4770      	bx	lr
 80051c8:	20000040 	.word	0x20000040

080051cc <_fwalk_reent>:
 80051cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d0:	4606      	mov	r6, r0
 80051d2:	4688      	mov	r8, r1
 80051d4:	2700      	movs	r7, #0
 80051d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051de:	f1b9 0901 	subs.w	r9, r9, #1
 80051e2:	d505      	bpl.n	80051f0 <_fwalk_reent+0x24>
 80051e4:	6824      	ldr	r4, [r4, #0]
 80051e6:	2c00      	cmp	r4, #0
 80051e8:	d1f7      	bne.n	80051da <_fwalk_reent+0xe>
 80051ea:	4638      	mov	r0, r7
 80051ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051f0:	89ab      	ldrh	r3, [r5, #12]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d907      	bls.n	8005206 <_fwalk_reent+0x3a>
 80051f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051fa:	3301      	adds	r3, #1
 80051fc:	d003      	beq.n	8005206 <_fwalk_reent+0x3a>
 80051fe:	4629      	mov	r1, r5
 8005200:	4630      	mov	r0, r6
 8005202:	47c0      	blx	r8
 8005204:	4307      	orrs	r7, r0
 8005206:	3568      	adds	r5, #104	; 0x68
 8005208:	e7e9      	b.n	80051de <_fwalk_reent+0x12>

0800520a <__retarget_lock_init_recursive>:
 800520a:	4770      	bx	lr

0800520c <__retarget_lock_acquire_recursive>:
 800520c:	4770      	bx	lr

0800520e <__retarget_lock_release_recursive>:
 800520e:	4770      	bx	lr

08005210 <__swhatbuf_r>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	460e      	mov	r6, r1
 8005214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005218:	4614      	mov	r4, r2
 800521a:	2900      	cmp	r1, #0
 800521c:	461d      	mov	r5, r3
 800521e:	b096      	sub	sp, #88	; 0x58
 8005220:	da07      	bge.n	8005232 <__swhatbuf_r+0x22>
 8005222:	2300      	movs	r3, #0
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	89b3      	ldrh	r3, [r6, #12]
 8005228:	061a      	lsls	r2, r3, #24
 800522a:	d410      	bmi.n	800524e <__swhatbuf_r+0x3e>
 800522c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005230:	e00e      	b.n	8005250 <__swhatbuf_r+0x40>
 8005232:	466a      	mov	r2, sp
 8005234:	f000 fc6a 	bl	8005b0c <_fstat_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	dbf2      	blt.n	8005222 <__swhatbuf_r+0x12>
 800523c:	9a01      	ldr	r2, [sp, #4]
 800523e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005246:	425a      	negs	r2, r3
 8005248:	415a      	adcs	r2, r3
 800524a:	602a      	str	r2, [r5, #0]
 800524c:	e7ee      	b.n	800522c <__swhatbuf_r+0x1c>
 800524e:	2340      	movs	r3, #64	; 0x40
 8005250:	2000      	movs	r0, #0
 8005252:	6023      	str	r3, [r4, #0]
 8005254:	b016      	add	sp, #88	; 0x58
 8005256:	bd70      	pop	{r4, r5, r6, pc}

08005258 <__smakebuf_r>:
 8005258:	898b      	ldrh	r3, [r1, #12]
 800525a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800525c:	079d      	lsls	r5, r3, #30
 800525e:	4606      	mov	r6, r0
 8005260:	460c      	mov	r4, r1
 8005262:	d507      	bpl.n	8005274 <__smakebuf_r+0x1c>
 8005264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	2301      	movs	r3, #1
 800526e:	6163      	str	r3, [r4, #20]
 8005270:	b002      	add	sp, #8
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	466a      	mov	r2, sp
 8005276:	ab01      	add	r3, sp, #4
 8005278:	f7ff ffca 	bl	8005210 <__swhatbuf_r>
 800527c:	9900      	ldr	r1, [sp, #0]
 800527e:	4605      	mov	r5, r0
 8005280:	4630      	mov	r0, r6
 8005282:	f000 f87d 	bl	8005380 <_malloc_r>
 8005286:	b948      	cbnz	r0, 800529c <__smakebuf_r+0x44>
 8005288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528c:	059a      	lsls	r2, r3, #22
 800528e:	d4ef      	bmi.n	8005270 <__smakebuf_r+0x18>
 8005290:	f023 0303 	bic.w	r3, r3, #3
 8005294:	f043 0302 	orr.w	r3, r3, #2
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	e7e3      	b.n	8005264 <__smakebuf_r+0xc>
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <__smakebuf_r+0x7c>)
 800529e:	62b3      	str	r3, [r6, #40]	; 0x28
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	6020      	str	r0, [r4, #0]
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	9b00      	ldr	r3, [sp, #0]
 80052ac:	6120      	str	r0, [r4, #16]
 80052ae:	6163      	str	r3, [r4, #20]
 80052b0:	9b01      	ldr	r3, [sp, #4]
 80052b2:	b15b      	cbz	r3, 80052cc <__smakebuf_r+0x74>
 80052b4:	4630      	mov	r0, r6
 80052b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ba:	f000 fc39 	bl	8005b30 <_isatty_r>
 80052be:	b128      	cbz	r0, 80052cc <__smakebuf_r+0x74>
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	89a0      	ldrh	r0, [r4, #12]
 80052ce:	4305      	orrs	r5, r0
 80052d0:	81a5      	strh	r5, [r4, #12]
 80052d2:	e7cd      	b.n	8005270 <__smakebuf_r+0x18>
 80052d4:	08005045 	.word	0x08005045

080052d8 <malloc>:
 80052d8:	4b02      	ldr	r3, [pc, #8]	; (80052e4 <malloc+0xc>)
 80052da:	4601      	mov	r1, r0
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	f000 b84f 	b.w	8005380 <_malloc_r>
 80052e2:	bf00      	nop
 80052e4:	20000040 	.word	0x20000040

080052e8 <_free_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4605      	mov	r5, r0
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d043      	beq.n	8005378 <_free_r+0x90>
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f0c      	subs	r4, r1, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfb8      	it	lt
 80052fa:	18e4      	addlt	r4, r4, r3
 80052fc:	f000 fc48 	bl	8005b90 <__malloc_lock>
 8005300:	4a1e      	ldr	r2, [pc, #120]	; (800537c <_free_r+0x94>)
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	4610      	mov	r0, r2
 8005306:	b933      	cbnz	r3, 8005316 <_free_r+0x2e>
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	6014      	str	r4, [r2, #0]
 800530c:	4628      	mov	r0, r5
 800530e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005312:	f000 bc43 	b.w	8005b9c <__malloc_unlock>
 8005316:	42a3      	cmp	r3, r4
 8005318:	d90a      	bls.n	8005330 <_free_r+0x48>
 800531a:	6821      	ldr	r1, [r4, #0]
 800531c:	1862      	adds	r2, r4, r1
 800531e:	4293      	cmp	r3, r2
 8005320:	bf01      	itttt	eq
 8005322:	681a      	ldreq	r2, [r3, #0]
 8005324:	685b      	ldreq	r3, [r3, #4]
 8005326:	1852      	addeq	r2, r2, r1
 8005328:	6022      	streq	r2, [r4, #0]
 800532a:	6063      	str	r3, [r4, #4]
 800532c:	6004      	str	r4, [r0, #0]
 800532e:	e7ed      	b.n	800530c <_free_r+0x24>
 8005330:	461a      	mov	r2, r3
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	b10b      	cbz	r3, 800533a <_free_r+0x52>
 8005336:	42a3      	cmp	r3, r4
 8005338:	d9fa      	bls.n	8005330 <_free_r+0x48>
 800533a:	6811      	ldr	r1, [r2, #0]
 800533c:	1850      	adds	r0, r2, r1
 800533e:	42a0      	cmp	r0, r4
 8005340:	d10b      	bne.n	800535a <_free_r+0x72>
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	4401      	add	r1, r0
 8005346:	1850      	adds	r0, r2, r1
 8005348:	4283      	cmp	r3, r0
 800534a:	6011      	str	r1, [r2, #0]
 800534c:	d1de      	bne.n	800530c <_free_r+0x24>
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4401      	add	r1, r0
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	6053      	str	r3, [r2, #4]
 8005358:	e7d8      	b.n	800530c <_free_r+0x24>
 800535a:	d902      	bls.n	8005362 <_free_r+0x7a>
 800535c:	230c      	movs	r3, #12
 800535e:	602b      	str	r3, [r5, #0]
 8005360:	e7d4      	b.n	800530c <_free_r+0x24>
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	1821      	adds	r1, r4, r0
 8005366:	428b      	cmp	r3, r1
 8005368:	bf01      	itttt	eq
 800536a:	6819      	ldreq	r1, [r3, #0]
 800536c:	685b      	ldreq	r3, [r3, #4]
 800536e:	1809      	addeq	r1, r1, r0
 8005370:	6021      	streq	r1, [r4, #0]
 8005372:	6063      	str	r3, [r4, #4]
 8005374:	6054      	str	r4, [r2, #4]
 8005376:	e7c9      	b.n	800530c <_free_r+0x24>
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	2000106c 	.word	0x2000106c

08005380 <_malloc_r>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	1ccd      	adds	r5, r1, #3
 8005384:	f025 0503 	bic.w	r5, r5, #3
 8005388:	3508      	adds	r5, #8
 800538a:	2d0c      	cmp	r5, #12
 800538c:	bf38      	it	cc
 800538e:	250c      	movcc	r5, #12
 8005390:	2d00      	cmp	r5, #0
 8005392:	4606      	mov	r6, r0
 8005394:	db01      	blt.n	800539a <_malloc_r+0x1a>
 8005396:	42a9      	cmp	r1, r5
 8005398:	d903      	bls.n	80053a2 <_malloc_r+0x22>
 800539a:	230c      	movs	r3, #12
 800539c:	6033      	str	r3, [r6, #0]
 800539e:	2000      	movs	r0, #0
 80053a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a2:	f000 fbf5 	bl	8005b90 <__malloc_lock>
 80053a6:	4921      	ldr	r1, [pc, #132]	; (800542c <_malloc_r+0xac>)
 80053a8:	680a      	ldr	r2, [r1, #0]
 80053aa:	4614      	mov	r4, r2
 80053ac:	b99c      	cbnz	r4, 80053d6 <_malloc_r+0x56>
 80053ae:	4f20      	ldr	r7, [pc, #128]	; (8005430 <_malloc_r+0xb0>)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	b923      	cbnz	r3, 80053be <_malloc_r+0x3e>
 80053b4:	4621      	mov	r1, r4
 80053b6:	4630      	mov	r0, r6
 80053b8:	f000 fb2a 	bl	8005a10 <_sbrk_r>
 80053bc:	6038      	str	r0, [r7, #0]
 80053be:	4629      	mov	r1, r5
 80053c0:	4630      	mov	r0, r6
 80053c2:	f000 fb25 	bl	8005a10 <_sbrk_r>
 80053c6:	1c43      	adds	r3, r0, #1
 80053c8:	d123      	bne.n	8005412 <_malloc_r+0x92>
 80053ca:	230c      	movs	r3, #12
 80053cc:	4630      	mov	r0, r6
 80053ce:	6033      	str	r3, [r6, #0]
 80053d0:	f000 fbe4 	bl	8005b9c <__malloc_unlock>
 80053d4:	e7e3      	b.n	800539e <_malloc_r+0x1e>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	1b5b      	subs	r3, r3, r5
 80053da:	d417      	bmi.n	800540c <_malloc_r+0x8c>
 80053dc:	2b0b      	cmp	r3, #11
 80053de:	d903      	bls.n	80053e8 <_malloc_r+0x68>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	441c      	add	r4, r3
 80053e4:	6025      	str	r5, [r4, #0]
 80053e6:	e004      	b.n	80053f2 <_malloc_r+0x72>
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	42a2      	cmp	r2, r4
 80053ec:	bf0c      	ite	eq
 80053ee:	600b      	streq	r3, [r1, #0]
 80053f0:	6053      	strne	r3, [r2, #4]
 80053f2:	4630      	mov	r0, r6
 80053f4:	f000 fbd2 	bl	8005b9c <__malloc_unlock>
 80053f8:	f104 000b 	add.w	r0, r4, #11
 80053fc:	1d23      	adds	r3, r4, #4
 80053fe:	f020 0007 	bic.w	r0, r0, #7
 8005402:	1ac2      	subs	r2, r0, r3
 8005404:	d0cc      	beq.n	80053a0 <_malloc_r+0x20>
 8005406:	1a1b      	subs	r3, r3, r0
 8005408:	50a3      	str	r3, [r4, r2]
 800540a:	e7c9      	b.n	80053a0 <_malloc_r+0x20>
 800540c:	4622      	mov	r2, r4
 800540e:	6864      	ldr	r4, [r4, #4]
 8005410:	e7cc      	b.n	80053ac <_malloc_r+0x2c>
 8005412:	1cc4      	adds	r4, r0, #3
 8005414:	f024 0403 	bic.w	r4, r4, #3
 8005418:	42a0      	cmp	r0, r4
 800541a:	d0e3      	beq.n	80053e4 <_malloc_r+0x64>
 800541c:	1a21      	subs	r1, r4, r0
 800541e:	4630      	mov	r0, r6
 8005420:	f000 faf6 	bl	8005a10 <_sbrk_r>
 8005424:	3001      	adds	r0, #1
 8005426:	d1dd      	bne.n	80053e4 <_malloc_r+0x64>
 8005428:	e7cf      	b.n	80053ca <_malloc_r+0x4a>
 800542a:	bf00      	nop
 800542c:	2000106c 	.word	0x2000106c
 8005430:	20001070 	.word	0x20001070

08005434 <__sfputc_r>:
 8005434:	6893      	ldr	r3, [r2, #8]
 8005436:	b410      	push	{r4}
 8005438:	3b01      	subs	r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	6093      	str	r3, [r2, #8]
 800543e:	da07      	bge.n	8005450 <__sfputc_r+0x1c>
 8005440:	6994      	ldr	r4, [r2, #24]
 8005442:	42a3      	cmp	r3, r4
 8005444:	db01      	blt.n	800544a <__sfputc_r+0x16>
 8005446:	290a      	cmp	r1, #10
 8005448:	d102      	bne.n	8005450 <__sfputc_r+0x1c>
 800544a:	bc10      	pop	{r4}
 800544c:	f7ff bc36 	b.w	8004cbc <__swbuf_r>
 8005450:	6813      	ldr	r3, [r2, #0]
 8005452:	1c58      	adds	r0, r3, #1
 8005454:	6010      	str	r0, [r2, #0]
 8005456:	7019      	strb	r1, [r3, #0]
 8005458:	4608      	mov	r0, r1
 800545a:	bc10      	pop	{r4}
 800545c:	4770      	bx	lr

0800545e <__sfputs_r>:
 800545e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005460:	4606      	mov	r6, r0
 8005462:	460f      	mov	r7, r1
 8005464:	4614      	mov	r4, r2
 8005466:	18d5      	adds	r5, r2, r3
 8005468:	42ac      	cmp	r4, r5
 800546a:	d101      	bne.n	8005470 <__sfputs_r+0x12>
 800546c:	2000      	movs	r0, #0
 800546e:	e007      	b.n	8005480 <__sfputs_r+0x22>
 8005470:	463a      	mov	r2, r7
 8005472:	4630      	mov	r0, r6
 8005474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005478:	f7ff ffdc 	bl	8005434 <__sfputc_r>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d1f3      	bne.n	8005468 <__sfputs_r+0xa>
 8005480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005484 <_vfiprintf_r>:
 8005484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005488:	460d      	mov	r5, r1
 800548a:	4614      	mov	r4, r2
 800548c:	4698      	mov	r8, r3
 800548e:	4606      	mov	r6, r0
 8005490:	b09d      	sub	sp, #116	; 0x74
 8005492:	b118      	cbz	r0, 800549c <_vfiprintf_r+0x18>
 8005494:	6983      	ldr	r3, [r0, #24]
 8005496:	b90b      	cbnz	r3, 800549c <_vfiprintf_r+0x18>
 8005498:	f7ff fe08 	bl	80050ac <__sinit>
 800549c:	4b89      	ldr	r3, [pc, #548]	; (80056c4 <_vfiprintf_r+0x240>)
 800549e:	429d      	cmp	r5, r3
 80054a0:	d11b      	bne.n	80054da <_vfiprintf_r+0x56>
 80054a2:	6875      	ldr	r5, [r6, #4]
 80054a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054a6:	07d9      	lsls	r1, r3, #31
 80054a8:	d405      	bmi.n	80054b6 <_vfiprintf_r+0x32>
 80054aa:	89ab      	ldrh	r3, [r5, #12]
 80054ac:	059a      	lsls	r2, r3, #22
 80054ae:	d402      	bmi.n	80054b6 <_vfiprintf_r+0x32>
 80054b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054b2:	f7ff feab 	bl	800520c <__retarget_lock_acquire_recursive>
 80054b6:	89ab      	ldrh	r3, [r5, #12]
 80054b8:	071b      	lsls	r3, r3, #28
 80054ba:	d501      	bpl.n	80054c0 <_vfiprintf_r+0x3c>
 80054bc:	692b      	ldr	r3, [r5, #16]
 80054be:	b9eb      	cbnz	r3, 80054fc <_vfiprintf_r+0x78>
 80054c0:	4629      	mov	r1, r5
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7ff fc4c 	bl	8004d60 <__swsetup_r>
 80054c8:	b1c0      	cbz	r0, 80054fc <_vfiprintf_r+0x78>
 80054ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054cc:	07dc      	lsls	r4, r3, #31
 80054ce:	d50e      	bpl.n	80054ee <_vfiprintf_r+0x6a>
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	b01d      	add	sp, #116	; 0x74
 80054d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054da:	4b7b      	ldr	r3, [pc, #492]	; (80056c8 <_vfiprintf_r+0x244>)
 80054dc:	429d      	cmp	r5, r3
 80054de:	d101      	bne.n	80054e4 <_vfiprintf_r+0x60>
 80054e0:	68b5      	ldr	r5, [r6, #8]
 80054e2:	e7df      	b.n	80054a4 <_vfiprintf_r+0x20>
 80054e4:	4b79      	ldr	r3, [pc, #484]	; (80056cc <_vfiprintf_r+0x248>)
 80054e6:	429d      	cmp	r5, r3
 80054e8:	bf08      	it	eq
 80054ea:	68f5      	ldreq	r5, [r6, #12]
 80054ec:	e7da      	b.n	80054a4 <_vfiprintf_r+0x20>
 80054ee:	89ab      	ldrh	r3, [r5, #12]
 80054f0:	0598      	lsls	r0, r3, #22
 80054f2:	d4ed      	bmi.n	80054d0 <_vfiprintf_r+0x4c>
 80054f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054f6:	f7ff fe8a 	bl	800520e <__retarget_lock_release_recursive>
 80054fa:	e7e9      	b.n	80054d0 <_vfiprintf_r+0x4c>
 80054fc:	2300      	movs	r3, #0
 80054fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005500:	2320      	movs	r3, #32
 8005502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005506:	2330      	movs	r3, #48	; 0x30
 8005508:	f04f 0901 	mov.w	r9, #1
 800550c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005510:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80056d0 <_vfiprintf_r+0x24c>
 8005514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005518:	4623      	mov	r3, r4
 800551a:	469a      	mov	sl, r3
 800551c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005520:	b10a      	cbz	r2, 8005526 <_vfiprintf_r+0xa2>
 8005522:	2a25      	cmp	r2, #37	; 0x25
 8005524:	d1f9      	bne.n	800551a <_vfiprintf_r+0x96>
 8005526:	ebba 0b04 	subs.w	fp, sl, r4
 800552a:	d00b      	beq.n	8005544 <_vfiprintf_r+0xc0>
 800552c:	465b      	mov	r3, fp
 800552e:	4622      	mov	r2, r4
 8005530:	4629      	mov	r1, r5
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff ff93 	bl	800545e <__sfputs_r>
 8005538:	3001      	adds	r0, #1
 800553a:	f000 80aa 	beq.w	8005692 <_vfiprintf_r+0x20e>
 800553e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005540:	445a      	add	r2, fp
 8005542:	9209      	str	r2, [sp, #36]	; 0x24
 8005544:	f89a 3000 	ldrb.w	r3, [sl]
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80a2 	beq.w	8005692 <_vfiprintf_r+0x20e>
 800554e:	2300      	movs	r3, #0
 8005550:	f04f 32ff 	mov.w	r2, #4294967295
 8005554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005558:	f10a 0a01 	add.w	sl, sl, #1
 800555c:	9304      	str	r3, [sp, #16]
 800555e:	9307      	str	r3, [sp, #28]
 8005560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005564:	931a      	str	r3, [sp, #104]	; 0x68
 8005566:	4654      	mov	r4, sl
 8005568:	2205      	movs	r2, #5
 800556a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556e:	4858      	ldr	r0, [pc, #352]	; (80056d0 <_vfiprintf_r+0x24c>)
 8005570:	f000 fb00 	bl	8005b74 <memchr>
 8005574:	9a04      	ldr	r2, [sp, #16]
 8005576:	b9d8      	cbnz	r0, 80055b0 <_vfiprintf_r+0x12c>
 8005578:	06d1      	lsls	r1, r2, #27
 800557a:	bf44      	itt	mi
 800557c:	2320      	movmi	r3, #32
 800557e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005582:	0713      	lsls	r3, r2, #28
 8005584:	bf44      	itt	mi
 8005586:	232b      	movmi	r3, #43	; 0x2b
 8005588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800558c:	f89a 3000 	ldrb.w	r3, [sl]
 8005590:	2b2a      	cmp	r3, #42	; 0x2a
 8005592:	d015      	beq.n	80055c0 <_vfiprintf_r+0x13c>
 8005594:	4654      	mov	r4, sl
 8005596:	2000      	movs	r0, #0
 8005598:	f04f 0c0a 	mov.w	ip, #10
 800559c:	9a07      	ldr	r2, [sp, #28]
 800559e:	4621      	mov	r1, r4
 80055a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055a4:	3b30      	subs	r3, #48	; 0x30
 80055a6:	2b09      	cmp	r3, #9
 80055a8:	d94e      	bls.n	8005648 <_vfiprintf_r+0x1c4>
 80055aa:	b1b0      	cbz	r0, 80055da <_vfiprintf_r+0x156>
 80055ac:	9207      	str	r2, [sp, #28]
 80055ae:	e014      	b.n	80055da <_vfiprintf_r+0x156>
 80055b0:	eba0 0308 	sub.w	r3, r0, r8
 80055b4:	fa09 f303 	lsl.w	r3, r9, r3
 80055b8:	4313      	orrs	r3, r2
 80055ba:	46a2      	mov	sl, r4
 80055bc:	9304      	str	r3, [sp, #16]
 80055be:	e7d2      	b.n	8005566 <_vfiprintf_r+0xe2>
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	1d19      	adds	r1, r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	9103      	str	r1, [sp, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bfbb      	ittet	lt
 80055cc:	425b      	neglt	r3, r3
 80055ce:	f042 0202 	orrlt.w	r2, r2, #2
 80055d2:	9307      	strge	r3, [sp, #28]
 80055d4:	9307      	strlt	r3, [sp, #28]
 80055d6:	bfb8      	it	lt
 80055d8:	9204      	strlt	r2, [sp, #16]
 80055da:	7823      	ldrb	r3, [r4, #0]
 80055dc:	2b2e      	cmp	r3, #46	; 0x2e
 80055de:	d10c      	bne.n	80055fa <_vfiprintf_r+0x176>
 80055e0:	7863      	ldrb	r3, [r4, #1]
 80055e2:	2b2a      	cmp	r3, #42	; 0x2a
 80055e4:	d135      	bne.n	8005652 <_vfiprintf_r+0x1ce>
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	3402      	adds	r4, #2
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	9203      	str	r2, [sp, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfb8      	it	lt
 80055f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80055f8:	9305      	str	r3, [sp, #20]
 80055fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056e0 <_vfiprintf_r+0x25c>
 80055fe:	2203      	movs	r2, #3
 8005600:	4650      	mov	r0, sl
 8005602:	7821      	ldrb	r1, [r4, #0]
 8005604:	f000 fab6 	bl	8005b74 <memchr>
 8005608:	b140      	cbz	r0, 800561c <_vfiprintf_r+0x198>
 800560a:	2340      	movs	r3, #64	; 0x40
 800560c:	eba0 000a 	sub.w	r0, r0, sl
 8005610:	fa03 f000 	lsl.w	r0, r3, r0
 8005614:	9b04      	ldr	r3, [sp, #16]
 8005616:	3401      	adds	r4, #1
 8005618:	4303      	orrs	r3, r0
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005620:	2206      	movs	r2, #6
 8005622:	482c      	ldr	r0, [pc, #176]	; (80056d4 <_vfiprintf_r+0x250>)
 8005624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005628:	f000 faa4 	bl	8005b74 <memchr>
 800562c:	2800      	cmp	r0, #0
 800562e:	d03f      	beq.n	80056b0 <_vfiprintf_r+0x22c>
 8005630:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <_vfiprintf_r+0x254>)
 8005632:	bb1b      	cbnz	r3, 800567c <_vfiprintf_r+0x1f8>
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	3307      	adds	r3, #7
 8005638:	f023 0307 	bic.w	r3, r3, #7
 800563c:	3308      	adds	r3, #8
 800563e:	9303      	str	r3, [sp, #12]
 8005640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005642:	443b      	add	r3, r7
 8005644:	9309      	str	r3, [sp, #36]	; 0x24
 8005646:	e767      	b.n	8005518 <_vfiprintf_r+0x94>
 8005648:	460c      	mov	r4, r1
 800564a:	2001      	movs	r0, #1
 800564c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005650:	e7a5      	b.n	800559e <_vfiprintf_r+0x11a>
 8005652:	2300      	movs	r3, #0
 8005654:	f04f 0c0a 	mov.w	ip, #10
 8005658:	4619      	mov	r1, r3
 800565a:	3401      	adds	r4, #1
 800565c:	9305      	str	r3, [sp, #20]
 800565e:	4620      	mov	r0, r4
 8005660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005664:	3a30      	subs	r2, #48	; 0x30
 8005666:	2a09      	cmp	r2, #9
 8005668:	d903      	bls.n	8005672 <_vfiprintf_r+0x1ee>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0c5      	beq.n	80055fa <_vfiprintf_r+0x176>
 800566e:	9105      	str	r1, [sp, #20]
 8005670:	e7c3      	b.n	80055fa <_vfiprintf_r+0x176>
 8005672:	4604      	mov	r4, r0
 8005674:	2301      	movs	r3, #1
 8005676:	fb0c 2101 	mla	r1, ip, r1, r2
 800567a:	e7f0      	b.n	800565e <_vfiprintf_r+0x1da>
 800567c:	ab03      	add	r3, sp, #12
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	462a      	mov	r2, r5
 8005682:	4630      	mov	r0, r6
 8005684:	4b15      	ldr	r3, [pc, #84]	; (80056dc <_vfiprintf_r+0x258>)
 8005686:	a904      	add	r1, sp, #16
 8005688:	f3af 8000 	nop.w
 800568c:	4607      	mov	r7, r0
 800568e:	1c78      	adds	r0, r7, #1
 8005690:	d1d6      	bne.n	8005640 <_vfiprintf_r+0x1bc>
 8005692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005694:	07d9      	lsls	r1, r3, #31
 8005696:	d405      	bmi.n	80056a4 <_vfiprintf_r+0x220>
 8005698:	89ab      	ldrh	r3, [r5, #12]
 800569a:	059a      	lsls	r2, r3, #22
 800569c:	d402      	bmi.n	80056a4 <_vfiprintf_r+0x220>
 800569e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a0:	f7ff fdb5 	bl	800520e <__retarget_lock_release_recursive>
 80056a4:	89ab      	ldrh	r3, [r5, #12]
 80056a6:	065b      	lsls	r3, r3, #25
 80056a8:	f53f af12 	bmi.w	80054d0 <_vfiprintf_r+0x4c>
 80056ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ae:	e711      	b.n	80054d4 <_vfiprintf_r+0x50>
 80056b0:	ab03      	add	r3, sp, #12
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	462a      	mov	r2, r5
 80056b6:	4630      	mov	r0, r6
 80056b8:	4b08      	ldr	r3, [pc, #32]	; (80056dc <_vfiprintf_r+0x258>)
 80056ba:	a904      	add	r1, sp, #16
 80056bc:	f000 f882 	bl	80057c4 <_printf_i>
 80056c0:	e7e4      	b.n	800568c <_vfiprintf_r+0x208>
 80056c2:	bf00      	nop
 80056c4:	08005f10 	.word	0x08005f10
 80056c8:	08005f30 	.word	0x08005f30
 80056cc:	08005ef0 	.word	0x08005ef0
 80056d0:	08005f50 	.word	0x08005f50
 80056d4:	08005f5a 	.word	0x08005f5a
 80056d8:	00000000 	.word	0x00000000
 80056dc:	0800545f 	.word	0x0800545f
 80056e0:	08005f56 	.word	0x08005f56

080056e4 <_printf_common>:
 80056e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e8:	4616      	mov	r6, r2
 80056ea:	4699      	mov	r9, r3
 80056ec:	688a      	ldr	r2, [r1, #8]
 80056ee:	690b      	ldr	r3, [r1, #16]
 80056f0:	4607      	mov	r7, r0
 80056f2:	4293      	cmp	r3, r2
 80056f4:	bfb8      	it	lt
 80056f6:	4613      	movlt	r3, r2
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056fe:	460c      	mov	r4, r1
 8005700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005704:	b10a      	cbz	r2, 800570a <_printf_common+0x26>
 8005706:	3301      	adds	r3, #1
 8005708:	6033      	str	r3, [r6, #0]
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	0699      	lsls	r1, r3, #26
 800570e:	bf42      	ittt	mi
 8005710:	6833      	ldrmi	r3, [r6, #0]
 8005712:	3302      	addmi	r3, #2
 8005714:	6033      	strmi	r3, [r6, #0]
 8005716:	6825      	ldr	r5, [r4, #0]
 8005718:	f015 0506 	ands.w	r5, r5, #6
 800571c:	d106      	bne.n	800572c <_printf_common+0x48>
 800571e:	f104 0a19 	add.w	sl, r4, #25
 8005722:	68e3      	ldr	r3, [r4, #12]
 8005724:	6832      	ldr	r2, [r6, #0]
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	42ab      	cmp	r3, r5
 800572a:	dc28      	bgt.n	800577e <_printf_common+0x9a>
 800572c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005730:	1e13      	subs	r3, r2, #0
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	bf18      	it	ne
 8005736:	2301      	movne	r3, #1
 8005738:	0692      	lsls	r2, r2, #26
 800573a:	d42d      	bmi.n	8005798 <_printf_common+0xb4>
 800573c:	4649      	mov	r1, r9
 800573e:	4638      	mov	r0, r7
 8005740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005744:	47c0      	blx	r8
 8005746:	3001      	adds	r0, #1
 8005748:	d020      	beq.n	800578c <_printf_common+0xa8>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	68e5      	ldr	r5, [r4, #12]
 800574e:	f003 0306 	and.w	r3, r3, #6
 8005752:	2b04      	cmp	r3, #4
 8005754:	bf18      	it	ne
 8005756:	2500      	movne	r5, #0
 8005758:	6832      	ldr	r2, [r6, #0]
 800575a:	f04f 0600 	mov.w	r6, #0
 800575e:	68a3      	ldr	r3, [r4, #8]
 8005760:	bf08      	it	eq
 8005762:	1aad      	subeq	r5, r5, r2
 8005764:	6922      	ldr	r2, [r4, #16]
 8005766:	bf08      	it	eq
 8005768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800576c:	4293      	cmp	r3, r2
 800576e:	bfc4      	itt	gt
 8005770:	1a9b      	subgt	r3, r3, r2
 8005772:	18ed      	addgt	r5, r5, r3
 8005774:	341a      	adds	r4, #26
 8005776:	42b5      	cmp	r5, r6
 8005778:	d11a      	bne.n	80057b0 <_printf_common+0xcc>
 800577a:	2000      	movs	r0, #0
 800577c:	e008      	b.n	8005790 <_printf_common+0xac>
 800577e:	2301      	movs	r3, #1
 8005780:	4652      	mov	r2, sl
 8005782:	4649      	mov	r1, r9
 8005784:	4638      	mov	r0, r7
 8005786:	47c0      	blx	r8
 8005788:	3001      	adds	r0, #1
 800578a:	d103      	bne.n	8005794 <_printf_common+0xb0>
 800578c:	f04f 30ff 	mov.w	r0, #4294967295
 8005790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005794:	3501      	adds	r5, #1
 8005796:	e7c4      	b.n	8005722 <_printf_common+0x3e>
 8005798:	2030      	movs	r0, #48	; 0x30
 800579a:	18e1      	adds	r1, r4, r3
 800579c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057a6:	4422      	add	r2, r4
 80057a8:	3302      	adds	r3, #2
 80057aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057ae:	e7c5      	b.n	800573c <_printf_common+0x58>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4622      	mov	r2, r4
 80057b4:	4649      	mov	r1, r9
 80057b6:	4638      	mov	r0, r7
 80057b8:	47c0      	blx	r8
 80057ba:	3001      	adds	r0, #1
 80057bc:	d0e6      	beq.n	800578c <_printf_common+0xa8>
 80057be:	3601      	adds	r6, #1
 80057c0:	e7d9      	b.n	8005776 <_printf_common+0x92>
	...

080057c4 <_printf_i>:
 80057c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	460c      	mov	r4, r1
 80057ca:	7e27      	ldrb	r7, [r4, #24]
 80057cc:	4691      	mov	r9, r2
 80057ce:	2f78      	cmp	r7, #120	; 0x78
 80057d0:	4680      	mov	r8, r0
 80057d2:	469a      	mov	sl, r3
 80057d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057da:	d807      	bhi.n	80057ec <_printf_i+0x28>
 80057dc:	2f62      	cmp	r7, #98	; 0x62
 80057de:	d80a      	bhi.n	80057f6 <_printf_i+0x32>
 80057e0:	2f00      	cmp	r7, #0
 80057e2:	f000 80d9 	beq.w	8005998 <_printf_i+0x1d4>
 80057e6:	2f58      	cmp	r7, #88	; 0x58
 80057e8:	f000 80a4 	beq.w	8005934 <_printf_i+0x170>
 80057ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057f4:	e03a      	b.n	800586c <_printf_i+0xa8>
 80057f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057fa:	2b15      	cmp	r3, #21
 80057fc:	d8f6      	bhi.n	80057ec <_printf_i+0x28>
 80057fe:	a001      	add	r0, pc, #4	; (adr r0, 8005804 <_printf_i+0x40>)
 8005800:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005804:	0800585d 	.word	0x0800585d
 8005808:	08005871 	.word	0x08005871
 800580c:	080057ed 	.word	0x080057ed
 8005810:	080057ed 	.word	0x080057ed
 8005814:	080057ed 	.word	0x080057ed
 8005818:	080057ed 	.word	0x080057ed
 800581c:	08005871 	.word	0x08005871
 8005820:	080057ed 	.word	0x080057ed
 8005824:	080057ed 	.word	0x080057ed
 8005828:	080057ed 	.word	0x080057ed
 800582c:	080057ed 	.word	0x080057ed
 8005830:	0800597f 	.word	0x0800597f
 8005834:	080058a1 	.word	0x080058a1
 8005838:	08005961 	.word	0x08005961
 800583c:	080057ed 	.word	0x080057ed
 8005840:	080057ed 	.word	0x080057ed
 8005844:	080059a1 	.word	0x080059a1
 8005848:	080057ed 	.word	0x080057ed
 800584c:	080058a1 	.word	0x080058a1
 8005850:	080057ed 	.word	0x080057ed
 8005854:	080057ed 	.word	0x080057ed
 8005858:	08005969 	.word	0x08005969
 800585c:	680b      	ldr	r3, [r1, #0]
 800585e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	600a      	str	r2, [r1, #0]
 8005868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800586c:	2301      	movs	r3, #1
 800586e:	e0a4      	b.n	80059ba <_printf_i+0x1f6>
 8005870:	6825      	ldr	r5, [r4, #0]
 8005872:	6808      	ldr	r0, [r1, #0]
 8005874:	062e      	lsls	r6, r5, #24
 8005876:	f100 0304 	add.w	r3, r0, #4
 800587a:	d50a      	bpl.n	8005892 <_printf_i+0xce>
 800587c:	6805      	ldr	r5, [r0, #0]
 800587e:	600b      	str	r3, [r1, #0]
 8005880:	2d00      	cmp	r5, #0
 8005882:	da03      	bge.n	800588c <_printf_i+0xc8>
 8005884:	232d      	movs	r3, #45	; 0x2d
 8005886:	426d      	negs	r5, r5
 8005888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588c:	230a      	movs	r3, #10
 800588e:	485e      	ldr	r0, [pc, #376]	; (8005a08 <_printf_i+0x244>)
 8005890:	e019      	b.n	80058c6 <_printf_i+0x102>
 8005892:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005896:	6805      	ldr	r5, [r0, #0]
 8005898:	600b      	str	r3, [r1, #0]
 800589a:	bf18      	it	ne
 800589c:	b22d      	sxthne	r5, r5
 800589e:	e7ef      	b.n	8005880 <_printf_i+0xbc>
 80058a0:	680b      	ldr	r3, [r1, #0]
 80058a2:	6825      	ldr	r5, [r4, #0]
 80058a4:	1d18      	adds	r0, r3, #4
 80058a6:	6008      	str	r0, [r1, #0]
 80058a8:	0628      	lsls	r0, r5, #24
 80058aa:	d501      	bpl.n	80058b0 <_printf_i+0xec>
 80058ac:	681d      	ldr	r5, [r3, #0]
 80058ae:	e002      	b.n	80058b6 <_printf_i+0xf2>
 80058b0:	0669      	lsls	r1, r5, #25
 80058b2:	d5fb      	bpl.n	80058ac <_printf_i+0xe8>
 80058b4:	881d      	ldrh	r5, [r3, #0]
 80058b6:	2f6f      	cmp	r7, #111	; 0x6f
 80058b8:	bf0c      	ite	eq
 80058ba:	2308      	moveq	r3, #8
 80058bc:	230a      	movne	r3, #10
 80058be:	4852      	ldr	r0, [pc, #328]	; (8005a08 <_printf_i+0x244>)
 80058c0:	2100      	movs	r1, #0
 80058c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058c6:	6866      	ldr	r6, [r4, #4]
 80058c8:	2e00      	cmp	r6, #0
 80058ca:	bfa8      	it	ge
 80058cc:	6821      	ldrge	r1, [r4, #0]
 80058ce:	60a6      	str	r6, [r4, #8]
 80058d0:	bfa4      	itt	ge
 80058d2:	f021 0104 	bicge.w	r1, r1, #4
 80058d6:	6021      	strge	r1, [r4, #0]
 80058d8:	b90d      	cbnz	r5, 80058de <_printf_i+0x11a>
 80058da:	2e00      	cmp	r6, #0
 80058dc:	d04d      	beq.n	800597a <_printf_i+0x1b6>
 80058de:	4616      	mov	r6, r2
 80058e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80058e4:	fb03 5711 	mls	r7, r3, r1, r5
 80058e8:	5dc7      	ldrb	r7, [r0, r7]
 80058ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058ee:	462f      	mov	r7, r5
 80058f0:	42bb      	cmp	r3, r7
 80058f2:	460d      	mov	r5, r1
 80058f4:	d9f4      	bls.n	80058e0 <_printf_i+0x11c>
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d10b      	bne.n	8005912 <_printf_i+0x14e>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	07df      	lsls	r7, r3, #31
 80058fe:	d508      	bpl.n	8005912 <_printf_i+0x14e>
 8005900:	6923      	ldr	r3, [r4, #16]
 8005902:	6861      	ldr	r1, [r4, #4]
 8005904:	4299      	cmp	r1, r3
 8005906:	bfde      	ittt	le
 8005908:	2330      	movle	r3, #48	; 0x30
 800590a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800590e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005912:	1b92      	subs	r2, r2, r6
 8005914:	6122      	str	r2, [r4, #16]
 8005916:	464b      	mov	r3, r9
 8005918:	4621      	mov	r1, r4
 800591a:	4640      	mov	r0, r8
 800591c:	f8cd a000 	str.w	sl, [sp]
 8005920:	aa03      	add	r2, sp, #12
 8005922:	f7ff fedf 	bl	80056e4 <_printf_common>
 8005926:	3001      	adds	r0, #1
 8005928:	d14c      	bne.n	80059c4 <_printf_i+0x200>
 800592a:	f04f 30ff 	mov.w	r0, #4294967295
 800592e:	b004      	add	sp, #16
 8005930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005934:	4834      	ldr	r0, [pc, #208]	; (8005a08 <_printf_i+0x244>)
 8005936:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800593a:	680e      	ldr	r6, [r1, #0]
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005942:	061f      	lsls	r7, r3, #24
 8005944:	600e      	str	r6, [r1, #0]
 8005946:	d514      	bpl.n	8005972 <_printf_i+0x1ae>
 8005948:	07d9      	lsls	r1, r3, #31
 800594a:	bf44      	itt	mi
 800594c:	f043 0320 	orrmi.w	r3, r3, #32
 8005950:	6023      	strmi	r3, [r4, #0]
 8005952:	b91d      	cbnz	r5, 800595c <_printf_i+0x198>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	f023 0320 	bic.w	r3, r3, #32
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	2310      	movs	r3, #16
 800595e:	e7af      	b.n	80058c0 <_printf_i+0xfc>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	f043 0320 	orr.w	r3, r3, #32
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	2378      	movs	r3, #120	; 0x78
 800596a:	4828      	ldr	r0, [pc, #160]	; (8005a0c <_printf_i+0x248>)
 800596c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005970:	e7e3      	b.n	800593a <_printf_i+0x176>
 8005972:	065e      	lsls	r6, r3, #25
 8005974:	bf48      	it	mi
 8005976:	b2ad      	uxthmi	r5, r5
 8005978:	e7e6      	b.n	8005948 <_printf_i+0x184>
 800597a:	4616      	mov	r6, r2
 800597c:	e7bb      	b.n	80058f6 <_printf_i+0x132>
 800597e:	680b      	ldr	r3, [r1, #0]
 8005980:	6826      	ldr	r6, [r4, #0]
 8005982:	1d1d      	adds	r5, r3, #4
 8005984:	6960      	ldr	r0, [r4, #20]
 8005986:	600d      	str	r5, [r1, #0]
 8005988:	0635      	lsls	r5, r6, #24
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	d501      	bpl.n	8005992 <_printf_i+0x1ce>
 800598e:	6018      	str	r0, [r3, #0]
 8005990:	e002      	b.n	8005998 <_printf_i+0x1d4>
 8005992:	0671      	lsls	r1, r6, #25
 8005994:	d5fb      	bpl.n	800598e <_printf_i+0x1ca>
 8005996:	8018      	strh	r0, [r3, #0]
 8005998:	2300      	movs	r3, #0
 800599a:	4616      	mov	r6, r2
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	e7ba      	b.n	8005916 <_printf_i+0x152>
 80059a0:	680b      	ldr	r3, [r1, #0]
 80059a2:	1d1a      	adds	r2, r3, #4
 80059a4:	600a      	str	r2, [r1, #0]
 80059a6:	681e      	ldr	r6, [r3, #0]
 80059a8:	2100      	movs	r1, #0
 80059aa:	4630      	mov	r0, r6
 80059ac:	6862      	ldr	r2, [r4, #4]
 80059ae:	f000 f8e1 	bl	8005b74 <memchr>
 80059b2:	b108      	cbz	r0, 80059b8 <_printf_i+0x1f4>
 80059b4:	1b80      	subs	r0, r0, r6
 80059b6:	6060      	str	r0, [r4, #4]
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	6123      	str	r3, [r4, #16]
 80059bc:	2300      	movs	r3, #0
 80059be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c2:	e7a8      	b.n	8005916 <_printf_i+0x152>
 80059c4:	4632      	mov	r2, r6
 80059c6:	4649      	mov	r1, r9
 80059c8:	4640      	mov	r0, r8
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	47d0      	blx	sl
 80059ce:	3001      	adds	r0, #1
 80059d0:	d0ab      	beq.n	800592a <_printf_i+0x166>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	079b      	lsls	r3, r3, #30
 80059d6:	d413      	bmi.n	8005a00 <_printf_i+0x23c>
 80059d8:	68e0      	ldr	r0, [r4, #12]
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	4298      	cmp	r0, r3
 80059de:	bfb8      	it	lt
 80059e0:	4618      	movlt	r0, r3
 80059e2:	e7a4      	b.n	800592e <_printf_i+0x16a>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4632      	mov	r2, r6
 80059e8:	4649      	mov	r1, r9
 80059ea:	4640      	mov	r0, r8
 80059ec:	47d0      	blx	sl
 80059ee:	3001      	adds	r0, #1
 80059f0:	d09b      	beq.n	800592a <_printf_i+0x166>
 80059f2:	3501      	adds	r5, #1
 80059f4:	68e3      	ldr	r3, [r4, #12]
 80059f6:	9903      	ldr	r1, [sp, #12]
 80059f8:	1a5b      	subs	r3, r3, r1
 80059fa:	42ab      	cmp	r3, r5
 80059fc:	dcf2      	bgt.n	80059e4 <_printf_i+0x220>
 80059fe:	e7eb      	b.n	80059d8 <_printf_i+0x214>
 8005a00:	2500      	movs	r5, #0
 8005a02:	f104 0619 	add.w	r6, r4, #25
 8005a06:	e7f5      	b.n	80059f4 <_printf_i+0x230>
 8005a08:	08005f61 	.word	0x08005f61
 8005a0c:	08005f72 	.word	0x08005f72

08005a10 <_sbrk_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	2300      	movs	r3, #0
 8005a14:	4d05      	ldr	r5, [pc, #20]	; (8005a2c <_sbrk_r+0x1c>)
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fa ffce 	bl	80009bc <_sbrk>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_sbrk_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_sbrk_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20001164 	.word	0x20001164

08005a30 <__sread>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	460c      	mov	r4, r1
 8005a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a38:	f000 f8b6 	bl	8005ba8 <_read_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	bfab      	itete	ge
 8005a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a42:	89a3      	ldrhlt	r3, [r4, #12]
 8005a44:	181b      	addge	r3, r3, r0
 8005a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a4a:	bfac      	ite	ge
 8005a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a4e:	81a3      	strhlt	r3, [r4, #12]
 8005a50:	bd10      	pop	{r4, pc}

08005a52 <__swrite>:
 8005a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a56:	461f      	mov	r7, r3
 8005a58:	898b      	ldrh	r3, [r1, #12]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	05db      	lsls	r3, r3, #23
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4616      	mov	r6, r2
 8005a62:	d505      	bpl.n	8005a70 <__swrite+0x1e>
 8005a64:	2302      	movs	r3, #2
 8005a66:	2200      	movs	r2, #0
 8005a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6c:	f000 f870 	bl	8005b50 <_lseek_r>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	4632      	mov	r2, r6
 8005a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a86:	f000 b817 	b.w	8005ab8 <_write_r>

08005a8a <__sseek>:
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a92:	f000 f85d 	bl	8005b50 <_lseek_r>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	bf15      	itete	ne
 8005a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aa6:	81a3      	strheq	r3, [r4, #12]
 8005aa8:	bf18      	it	ne
 8005aaa:	81a3      	strhne	r3, [r4, #12]
 8005aac:	bd10      	pop	{r4, pc}

08005aae <__sclose>:
 8005aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab2:	f000 b81b 	b.w	8005aec <_close_r>
	...

08005ab8 <_write_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4604      	mov	r4, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4d05      	ldr	r5, [pc, #20]	; (8005ad8 <_write_r+0x20>)
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fa ff2c 	bl	8000924 <_write>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_write_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_write_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20001164 	.word	0x20001164

08005adc <abort>:
 8005adc:	2006      	movs	r0, #6
 8005ade:	b508      	push	{r3, lr}
 8005ae0:	f000 f89c 	bl	8005c1c <raise>
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	f7fa fef6 	bl	80008d6 <_exit>
	...

08005aec <_close_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	2300      	movs	r3, #0
 8005af0:	4d05      	ldr	r5, [pc, #20]	; (8005b08 <_close_r+0x1c>)
 8005af2:	4604      	mov	r4, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	f7fa ff30 	bl	800095c <_close>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_close_r+0x1a>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_close_r+0x1a>
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	20001164 	.word	0x20001164

08005b0c <_fstat_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	2300      	movs	r3, #0
 8005b10:	4d06      	ldr	r5, [pc, #24]	; (8005b2c <_fstat_r+0x20>)
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	4611      	mov	r1, r2
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	f7fa ff2a 	bl	8000972 <_fstat>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d102      	bne.n	8005b28 <_fstat_r+0x1c>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	b103      	cbz	r3, 8005b28 <_fstat_r+0x1c>
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	bd38      	pop	{r3, r4, r5, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20001164 	.word	0x20001164

08005b30 <_isatty_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	2300      	movs	r3, #0
 8005b34:	4d05      	ldr	r5, [pc, #20]	; (8005b4c <_isatty_r+0x1c>)
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	602b      	str	r3, [r5, #0]
 8005b3c:	f7fa ff28 	bl	8000990 <_isatty>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_isatty_r+0x1a>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_isatty_r+0x1a>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20001164 	.word	0x20001164

08005b50 <_lseek_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4d05      	ldr	r5, [pc, #20]	; (8005b70 <_lseek_r+0x20>)
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f7fa ff20 	bl	80009a4 <_lseek>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_lseek_r+0x1e>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_lseek_r+0x1e>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	20001164 	.word	0x20001164

08005b74 <memchr>:
 8005b74:	4603      	mov	r3, r0
 8005b76:	b510      	push	{r4, lr}
 8005b78:	b2c9      	uxtb	r1, r1
 8005b7a:	4402      	add	r2, r0
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	d101      	bne.n	8005b86 <memchr+0x12>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e003      	b.n	8005b8e <memchr+0x1a>
 8005b86:	7804      	ldrb	r4, [r0, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	428c      	cmp	r4, r1
 8005b8c:	d1f6      	bne.n	8005b7c <memchr+0x8>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <__malloc_lock>:
 8005b90:	4801      	ldr	r0, [pc, #4]	; (8005b98 <__malloc_lock+0x8>)
 8005b92:	f7ff bb3b 	b.w	800520c <__retarget_lock_acquire_recursive>
 8005b96:	bf00      	nop
 8005b98:	2000115c 	.word	0x2000115c

08005b9c <__malloc_unlock>:
 8005b9c:	4801      	ldr	r0, [pc, #4]	; (8005ba4 <__malloc_unlock+0x8>)
 8005b9e:	f7ff bb36 	b.w	800520e <__retarget_lock_release_recursive>
 8005ba2:	bf00      	nop
 8005ba4:	2000115c 	.word	0x2000115c

08005ba8 <_read_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	4611      	mov	r1, r2
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4d05      	ldr	r5, [pc, #20]	; (8005bc8 <_read_r+0x20>)
 8005bb4:	602a      	str	r2, [r5, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f7fa fe97 	bl	80008ea <_read>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_read_r+0x1e>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_read_r+0x1e>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	20001164 	.word	0x20001164

08005bcc <_raise_r>:
 8005bcc:	291f      	cmp	r1, #31
 8005bce:	b538      	push	{r3, r4, r5, lr}
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	d904      	bls.n	8005be0 <_raise_r+0x14>
 8005bd6:	2316      	movs	r3, #22
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005be2:	b112      	cbz	r2, 8005bea <_raise_r+0x1e>
 8005be4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005be8:	b94b      	cbnz	r3, 8005bfe <_raise_r+0x32>
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 f830 	bl	8005c50 <_getpid_r>
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bfa:	f000 b817 	b.w	8005c2c <_kill_r>
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d00a      	beq.n	8005c18 <_raise_r+0x4c>
 8005c02:	1c59      	adds	r1, r3, #1
 8005c04:	d103      	bne.n	8005c0e <_raise_r+0x42>
 8005c06:	2316      	movs	r3, #22
 8005c08:	6003      	str	r3, [r0, #0]
 8005c0a:	2001      	movs	r0, #1
 8005c0c:	e7e7      	b.n	8005bde <_raise_r+0x12>
 8005c0e:	2400      	movs	r4, #0
 8005c10:	4628      	mov	r0, r5
 8005c12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c16:	4798      	blx	r3
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e7e0      	b.n	8005bde <_raise_r+0x12>

08005c1c <raise>:
 8005c1c:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <raise+0xc>)
 8005c1e:	4601      	mov	r1, r0
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	f7ff bfd3 	b.w	8005bcc <_raise_r>
 8005c26:	bf00      	nop
 8005c28:	20000040 	.word	0x20000040

08005c2c <_kill_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4d06      	ldr	r5, [pc, #24]	; (8005c4c <_kill_r+0x20>)
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	f7fa fe3c 	bl	80008b6 <_kill>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d102      	bne.n	8005c48 <_kill_r+0x1c>
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	b103      	cbz	r3, 8005c48 <_kill_r+0x1c>
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20001164 	.word	0x20001164

08005c50 <_getpid_r>:
 8005c50:	f7fa be2a 	b.w	80008a8 <_getpid>

08005c54 <_init>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr

08005c60 <_fini>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr
